!!! 5
html.about(lang='en')
  head
    meta(name='apple-mobile-web-app-status-bar-style', content='black')

    title Cube Slam - About the tech
    link(rel='apple-touch-icon', href='/images/mobile/apple-touch-57.png')
    link(rel='apple-touch-icon', sizes='72x72', href='/images/mobile/apple-touch-72.png')
    link(rel='apple-touch-icon', sizes='114x114', href='/images/mobile/apple-touch-114.png')
    link(rel='apple-touch-icon', sizes='144x144', href='/images/minipong.png')

    link(rel='stylesheet', href='//fonts.googleapis.com/css?family=Varela')
    link(rel='stylesheet', href='/stylesheets/slam.css')

    script(type='text/javascript')
      var _gaq = _gaq || [];
      _gaq.push(['_setAccount', 'UA-39581099-3']);
      _gaq.push(['_trackPageview', '/about']);

      (function() {
        var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
        ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
        var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
      })();

  body
    header
      hgroup
        h2(arb:id='aboutTitle') Cube Slam
        h1(arb:id='aboutTech') About the tech

     section#webrtc
      img(src='/images/tech/webrtc.png', alt='Animals playing pong')
      h1(arb:id='webrtcTitle') WebRTC
      p(arb:id='webrtcText') <strong>Cube Slam</strong> is built using <strong>WebRTC</strong>, an open web technology that lets you video chat with your friends right in the browser, no plug-ins or downloads necessary. The <strong>getUserMedia API</strong> provides access to your webcam and microphone, <strong>RTCPeerConnection</strong> sends the audio and video to your friends, and <strong>RTCDataChannel</strong> exchanges all the bits and pieces that keep the game in sync.

    section#audio
      img(src='/images/tech/audio.png', alt='Animals playing pong')
      h1(arb:id='audioTitle') Web Audio
      p(arb:id='audioText') The <strong>Cube Slam</strong> music-tracker and sound manager are built on the <strong>Web Audio API</strong>, allowing for a dynamic soundtrack that adapts in real-time to every level you reach and extra you unlock.

    section#renderers
      img(src='/images/tech/3d.png', alt='Animals playing pong')
      h1(arb:id='3dTitle') WebGL & CSS3
      p(arb:id='3dText') If you play <strong>Cube Slam</strong> on Chrome or Firefox, you&rsquo;ll see real-time 3D rendering enabled by <strong>WebGL</strong> and three.js. If you don&rsquo;t have <strong>WebGL</strong>, you can still play <strong>Cube Slam</strong> in 3D thanks to <strong>CSS3</strong>, with the same game engine running under the hood. All the graphics run on your GPU, freeing the CPU for other tasks.

    section#platform
      img(src='/images/tech/platform.png', alt='Animals playing pong')
      h1(arb:id='platformTitle') Google Cloud Platform
      p(arb:id='platformText') <strong>Cube Slam</strong> is built entirely on <strong>Google&rsquo;s Cloud Platform</strong>. The app is hosted on <strong>App Engine</strong> with a backend written in <strong>Go</strong>, and the <strong>Channel API</strong> is used to set up the connection with your opponent. If one of the players is behind a firewall, the game uses a <strong>STUN/TURN</strong> server hosted on <strong>Compute Engine</strong> to exchange data. <strong>PageSpeed</strong> helps things load quickly, and <strong>AppCache</strong> lets you play offline.

    section#opensource
      img(src='/images/tech/opensource.jpg', alt='Animals playing pong')
      h1(arb:id='openTitle') Open source
      p(arb:id='openText') You can check out <strong>Cube Slam&rsquo;s</strong> source on <strong>&lt;Google Code&gt;</strong> or in the <strong>Chrome Developer Tools</strong> (you&rsquo;ll need to enable source maps). Also, as a reward for reading this far: you can add the ?&#8288;dev parameter to the URL to enable dat.gui and tweak all the levels, extras, and other attributes of the game. Have fun!

    script(src='/javascript/slam.{{.Minified}}js')
    script
      var $ = require('component-jquery')
        , sections = $('section')
        , timer
      $(window).resize(function(){
        if( timer )
          clearTimeout( timer );
        timer = setTimeout(function(){
          var h = $(window).height();
          if($('section').outerHeight() < h)
            $('section').css('height',h)
          else
            $('section').removeAttr('style');
        }, 100)
      }).resize();

      $(window).scroll(function(){
        var scrollTop = $(window).scrollTop()
          , height = $(window).height()
          , padding = np = $('header').height()
          , changed = $();
        $('body').css('paddingTop', padding);
        sections.removeClass('sticky').each( function(){
          var el = $(this)
            , oh = el.outerHeight();
          if(el.offset().top + oh <= height + scrollTop) {
            np += oh;
            changed = changed.add(this);
          } 
        })
        if(np != padding) {
          $('body').css('paddingTop', np);
          changed.addClass('sticky');
        }
      }).scroll();
    script
      require('slam/lib/localization').init('{{.AcceptLanguage}}')