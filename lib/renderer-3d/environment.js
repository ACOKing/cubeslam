var debug = require('debug')('renderer:3d:env')
  , ImprovedNoise = require('./improved-noise')
  , ObjectPool = require('./object-pool')
  , Materials = require('./materials')
  , Geometry = require('../geometry')
  , settings = require('../settings')
  , actions = require('../actions')
  , poly = require('geom').poly
  , stash = require('stash');

module.exports = Environment;

// Environment
//   - center // used with camera.lookAt(this.env.center)
//   - terrain
//   - forrest
//   - arena
//   - extras[]
//   - forces[]
//   - lights[]
//   - pucks[]
//   #update(world)

var bulletPool = createBulletPool()
var shieldPool = createShieldPool()
var puckPool = createPuckPool()

function Environment(renderer){
  debug('new')
  // used as camera.lookAt(this.env.center)
  this.center = new THREE.Vector3(0,0,0);
  this.arena = createArena(renderer)

  this.terrain = createTerrain(renderer)
  this.clouds = createClouds(this.terrain)
  this.lights = createLights(this.terrain)
  this.icons = createIcons(renderer)

  this.introPuck = puckPool.getObject();
  this.arena.add(this.introPuck);

  this.extras = stash()
  this.obstacles = stash()
  this.forces = stash()
  this.bullets = stash()
  this.pucks = stash()
  this.shields = stash()

  // only listen to changes from the 'game'-world
  // (and 'sync' in multiplayer)
  this.setupAddedRemoved('game');
}

Environment.prototype = {

  setupAddedRemoved: function(worldName){
    // remove any previous added/removed listeners
    if( this.onadded ){
      actions.off('added',this.onadded)
      actions.off('removed',this.onremoved)
    }

    this.onadded = function(type,world,body){
      if(world.name !== worldName) return;

      debug('added',type,body.index)
      switch(type){
        case 'extra':
          var obj = createExtra(this.arena, world, this.icons, body)
          this.extras.set(body.index,obj)
          break;
        case 'bullet':
          var obj = createBullet(this.arena, world, body)
          this.bullets.set(body.index,obj)
          break;
        case 'puck':
          var obj = createPuck(this.arena, body)
          this.pucks.set(body.index,obj)
          break;
        case 'shield':
          var obj = createShield(this.arena, body)
          this.shields.set(body.index,obj)
          break;
        case 'force':
          var obj = createForce(this.arena, world, body)
          this.forces.set(body.index,obj)
          break;
        case 'obstacle':
          var obj = createExtra(this.arena, world, this.icons, body)
          this.obstacles.set(body.index,obj)
          break;
        default:
          throw new Error('invalid type: '+type);
      }
    }.bind(this)

    this.onremoved = function(type,world,body){
      if(world.name !== worldName) return;

      debug('removed',type,body.index)
      switch(type){
        case 'extra':
          removeExtra(this.extras.get(body.index),false);
          this.extras.del(body.index);
          break;
        case 'bullet':
          removeBullet(this.bullets.get(body.index));
          this.bullets.del(body.index)
          break;
        case 'puck':
          removePuck(this.pucks.get(body.index));
          this.pucks.del(body.index);
          break;
        case 'shield':
          removeShield(this.shields.get(body.index));
          this.shields.del(body.index)
          break;
        case 'force':
          removeForce(this.forces.get(body.index));
          this.forces.del(body.index);
          break;
        case 'obstacle':
          removeObstacle(this.obstacles.get(body.index));
          this.obstacles.del(body.index);
          break;
        default:
          throw new Error('invalid type: '+type);
      }
    }.bind(this)

    actions.on('added',this.onadded)
    actions.on('removed',this.onremoved)
  },

  reset: function(){
    debug('reset')

    if( this.introPuck ) {
      this.introPuck.parent.remove(this.introPuck)
      puckPool.returnObject(this.introPuck.poolId);
      this.introPuck = null;
    }

    // remove all forces/extras/pucks
    while(this.pucks.values.length)
      removePuck(this.pucks.values.pop());
    while(this.forces.values.length)
      removeForce(this.forces.values.pop());
    while(this.extras.values.length)
      removeExtra(this.extras.values.pop(),false);
    while(this.obstacles.values.length)
      removeObstacle(this.obstacles.values.pop());
    while(this.bullets.values.length)
      removeBullet(this.bullets.values.pop());
    while(this.shields.values.length)
      removeShield(this.shields.values.pop(), true);

    this.pucks.empty()
    this.forces.empty()
    this.extras.empty()
    this.bullets.empty()
    this.obstacles.empty()
    this.shields.empty()
  },


  update: function(world,alpha){
    // skips some jitter when frozen
    if( world.state !== 'playing' ) return;

    var w = settings.data.arenaWidth
      , h = settings.data.arenaHeight
      , hw = w*.5
      , hh = h*.5;

    // update pucks
    for(var i=0; i < world.pucks.values.length; i++){
      var puck = world.pucks.values[i]
        , mesh = this.pucks.get(puck.index);

      mesh.position.x = puck.current[0] + (puck.current[0]-puck.previous[0])*alpha - hw;
      mesh.position.z = puck.current[1] + (puck.current[1]-puck.previous[1])*alpha - hh;

      mesh.scale.x = (puck.aabb[1] - puck.aabb[3])/100
      //mesh.scale.y = ((puck.aabb[1] - puck.aabb[3])/100)*2
      mesh.scale.z = (puck.aabb[2] - puck.aabb[0])/100

    }

    // update bullets
    for(var i=0; i < world.bullets.values.length; i++){
      var shot = world.bullets.values[i]
        , mesh = this.bullets.get(shot.index);
      if( mesh ){
        mesh.position.x = shot.current[0] - hw;
        mesh.position.z = shot.current[1] - hh;
      } else {
        console.warn('world.bullets doesn\'t match with env.bullets - "%s" is missing from env',shot.id)
      }
    }

    //update forces
    var force,mesh;

    for(var i=0; i < world.forces.values.length; i++){
      force = world.forces.values[i];
      mesh = this.forces.get(force.index);
      
      //update material
      if( mesh.visible != force.active ){
        mesh.material = (force.type == "repell")? Materials.forceRepell:Materials.forceAttract
      }
 
      mesh.visible = force.active;

    };
    
  }

}


function createArena(renderer){
  debug('create arena')
  var w = settings.data.arenaWidth
    , h = w/16*9
    , hw = w*.5
    , hh = h*.5
    , d = settings.data.arenaHeight
    , sideH = settings.data.arenaSideHeight
    , boxDepth = settings.data.videoBoxDepth

  var arena = new THREE.Object3D();
  arena.name = 'arena'
  arena.position.y = settings.data.arenaSurfaceY;
  renderer.container.add(arena);


  // boundingbox


  var sideGeo = new THREE.CubeGeometry(10,sideH,d,1,1,1);

  var rightMesh = new THREE.Mesh(sideGeo, Materials.arenaSideMaterials );
  rightMesh.position.x = hw;
  rightMesh.position.y = sideH*.5
  rightMesh.rotation.y = Math.PI;
  arena.add(rightMesh);
  arena.rightMesh = rightMesh;

  var leftMesh = new THREE.Mesh(sideGeo, Materials.arenaSideMaterials);
  leftMesh.position.x = -hw;
  leftMesh.position.y = sideH*.5;
  arena.add(leftMesh);
  arena.leftMesh = leftMesh;

  //construct pit walls

  var sideGeoPart = new THREE.CubeGeometry(10,sideH,boxDepth+5,4,4,4);
  var finalGeo = new THREE.Geometry();

  //a:left wall
  var tempMesh = new THREE.Mesh(sideGeoPart, Materials.arenaBorder );
  tempMesh.position.set(-hw,sideH*.5,d*.5+boxDepth*.5+2.5)
  THREE.GeometryUtils.merge(finalGeo, tempMesh);

  //a:right wall
  tempMesh.position.set(hw,sideH*.5,d*.5+boxDepth*.5+2.5)
  THREE.GeometryUtils.merge(finalGeo, tempMesh);

  //b:left wall
  tempMesh.position.set(-hw,sideH*.5,-d*.5-boxDepth*.5-2.5)
  THREE.GeometryUtils.merge(finalGeo, tempMesh);

  //b:right wall
  tempMesh.position.set(hw,sideH*.5,-d*.5-boxDepth*.5-2.5)
  THREE.GeometryUtils.merge(finalGeo, tempMesh);

  var bottomGeoPart = new THREE.CubeGeometry(w,sideH,10,1,1,1);
  //a:bottom wall
  tempMesh = new THREE.Mesh(bottomGeoPart, Materials.arenaBorder );
  tempMesh.position.set(0,sideH*.5,d*.5+boxDepth)
  THREE.GeometryUtils.merge(finalGeo, tempMesh);

  //b:bottom wall
  tempMesh = new THREE.Mesh(bottomGeoPart, Materials.arenaBorder );
  tempMesh.position.set(0,sideH*.5,-d*.5-boxDepth)
  THREE.GeometryUtils.merge(finalGeo, tempMesh);

  var finalMesh = new THREE.Mesh(finalGeo, Materials.arenaBorder );
  arena.add(finalMesh);


  var centerLineGeo = new THREE.PlaneGeometry(18,sideH+1,1,1 );
  var centerLineMesh = new THREE.Mesh(centerLineGeo,Materials.centerLine)
  centerLineMesh.position.x = 5.2;
  centerLineMesh.rotation.y = Math.PI*.5;
  arena.leftMesh.add(centerLineMesh);

  var centerLineMesh2 = new THREE.Mesh(centerLineGeo,Materials.centerLine);
  centerLineMesh2.position.x = 5.2;
  centerLineMesh2.rotation.y = -Math.PI*.5;
  arena.rightMesh.add(centerLineMesh2);

  //table
  var table = new THREE.Mesh( new THREE.PlaneGeometry(w,d,1,1), Materials.arenaGrid);
  table.rotation.x = -Math.PI*.5
  table.position.y = 0;
  arena.add(table);  
  
  

  var reflectionBoxGeo = new THREE.BoxGeometry(w,1000,d,1,1,1, { px: true, nx: true, py: false, ny: true, pz: true, nz: true });
  var blackBottomMesh = new THREE.Mesh( reflectionBoxGeo, Materials.reflectionBox);
  blackBottomMesh.position.y = -500;
  arena.add(blackBottomMesh);

  //digits
  var geom = new THREE.PlaneGeometry( 5*settings.data.unitSize, 8*settings.data.unitSize, 1, 1 );
  var digitPlane = new THREE.Mesh(geom, Materials.digitsPlayer1 );
  digitPlane.rotation.x = Math.PI*-.5;
  digitPlane.position.z = settings.data.arenaHeight*.5 - settings.data.unitSize*3 -  8*settings.data.unitSize*0.5;
  digitPlane.position.x = settings.data.arenaWidth*.5 - settings.data.unitSize*2 - 5*settings.data.unitSize*0.5-3;
  digitPlane.position.y = 0;
  arena.add(digitPlane);


  digitPlane = new THREE.Mesh(geom, Materials.digitsPlayer2 );
  digitPlane.rotation.x = Math.PI*-.5;
  digitPlane.rotation.z = Math.PI;

  digitPlane.position.z = -settings.data.arenaHeight*.5 + settings.data.unitSize*3 +  8*settings.data.unitSize*0.5;
  digitPlane.position.x = -settings.data.arenaWidth*.5 + settings.data.unitSize*2 + 5*settings.data.unitSize*0.5;
  digitPlane.position.y = 0;
  arena.add(digitPlane);

  return arena;
}


function createLights(terrain){
  debug('create lights')
  var lights = [];

  //var ambientLight = new THREE.AmbientLight(0x222222,0.5);
  //terrain.add(ambientLight)
  //lights.push(ambientLight)

  //var hemLight = new THREE.HemisphereLight(0xe5e4c6, 0xeeeeee,0.6);
  var hemLight = new THREE.HemisphereLight(settings.data.hemisphereLightSkyColor, settings.data.hemisphereLightGroundColor,settings.data.hemisphereLightIntensity);
  terrain.add(hemLight)
  lights.push(hemLight)

  var pointLight = new THREE.PointLight( settings.data.pointLightColor,settings.data.pointLightIntensity,2000 );
  pointLight.position = new THREE.Vector3(0,400,0);
  //terrain.add(pointLight);
  //lights.push(pointLight)

  var dirLight = new THREE.DirectionalLight(settings.data.dirlightColor,settings.data.dirLightIntensity);
  dirLight.color.setHSV( 0.1, 0.1, 1 );

  dirLight.position.set( 0, 1, 5 );
  dirLight.position.multiplyScalar( 150 );
  terrain.add(dirLight);
  lights.push(dirLight)

  settings.on("lightsUpdated", lightsUpdated.bind(this))

  lightsUpdated()

  function lightsUpdated(){

   // ambientLight.color.setHex(settings.data.ambientLightColor);
   // ambientLight.intensity = settings.data.ambientLightIntensity;
    dirLight.color.setHex(settings.data.dirLightColor);
    dirLight.intensity = settings.data.dirLightIntensity;

    dirLight.position.set( settings.data.dirLightX, settings.data.dirLightY, settings.data.dirLightZ ).normalize();
    //dirLight.position.multiplyScalar( 50 );

    pointLight.color.setHex(settings.data.pointLightColor);
    pointLight.intensity = settings.data.pointLightIntensity;
    hemLight.color.setHex(settings.data.hemisphereLightSkyColor);
    //hemLight.groundColor.setHex(settings.data.hemisphereLightGroundColor);
    hemLight.groundColor.setHex(settings.data.hemisphereLightGroundColor);
    hemLight.intensity = settings.data.hemisphereLightIntensity;
  }

  return lights;
}


function createTerrain(renderer){
  debug('create terrain')

  // close terrain
  var noise = null//new SimplexNoise()
    , h = 1000
    , n = 0
    , arenaW = settings.data.arenaWidth
    , arenaH = settings.data.arenaHeight;

  var terrain = new THREE.Object3D();
  terrain.name = 'terrain'
  renderer.container.add(terrain);

  var terrainMesh = new THREE.Mesh(Geometry.terrain,Materials.terrain1)
  terrainMesh.position.z = 0;
  terrainMesh.position.y = -6;
  terrain.terrainShortcut = terrainMesh;
  terrain.add(terrainMesh);

  //distant terrain
  terrainMesh = createTerrainMesh(8000,2000,3505,20,3,new THREE.Color( 0x1f84d5),4,false, Materials.terrain2)
  terrainMesh.position.z = -7500;
  terrainMesh.position.x = Math.random()*5000-2500;
  terrainMesh.position.y = settings.data.arenaSurfaceY-200;
  terrainMesh.scale.x = 4;
  terrainMesh.scale.y = 3;
  terrain.add(terrainMesh);

  terrainMesh = createTerrainMesh(4000,5000,8505,40,20,new THREE.Color( 0x195475 ),4,false, Materials.terrain3)
  terrainMesh.position.z = -6000;
  terrainMesh.position.x = Math.random()*5000-2500;
  terrainMesh.position.y = settings.data.arenaSurfaceY - 200;
  terrainMesh.scale.x = 4;
  terrainMesh.scale.y = 1;
  terrain.add(terrainMesh);

  createForrest(renderer,terrain)

  return terrain;
}


function createTerrainMesh( w, h, extrude, segW, segH, baseColor, noiseFactor, bValley, material ){

  var n = 0
    , faceIndices = [ 'a', 'b', 'c', 'd' ]
    , newColor = null
    , geometry = new THREE.PlaneGeometry(w,h,segW,segH)
    , len = geometry.vertices.length;

    THREE.GeometryUtils.triangulateQuads(geometry);

  // offset and change color
  var freq = 50;
  var z = Math.random() * 10;

  for (var i = 0; i < len; i++) {
    var point = geometry.vertices[i]
    point.x += Math.random()*60;
    point.y += Math.random()*150-70;

    if( Math.random() > 0.8 && i > 0 ) {
      if( point.distanceTo( geometry.vertices[i-1]) < 400 ) {
        point = geometry.vertices[i-1].clone();
      }

    }

    var uvY = 1-((point.y / h) + 0.5);
    var uvX = point.x/w

    n = ImprovedNoise.noise((uvX+0.5)*noiseFactor, uvY*noiseFactor, z ) + ImprovedNoise.noise((uvX+0.5)*noiseFactor*3, uvY*noiseFactor*3, 0 )*0.2
    n = Math.abs(n);

    if( bValley ) {
      point.z = n * extrude * (Math.abs(uvX*uvX))*2 * (1-uvY) + n*400*((1-Math.abs(uvX))*(uvY))
    }
    else {
      point.z = n * extrude * Math.max(0,(1-uvY)-0.1)*(0.5-Math.abs(uvX))*2 // + n*400*((1-Math.abs(uvX))*(uvY))
    }

    point.z += Math.random()*220;
  }

  //geometry.computeVertexNormals();
  geometry.mergeVertices();
  geometry.computeFaceNormals();

  var mountainMesh = new THREE.Mesh(geometry, material)
  mountainMesh.rotation.x = Math.PI*-.5
  return mountainMesh;
}


function createForrest(renderer,terrain) {
  debug('create forrest');
  var mergeGeometry = new THREE.Geometry();
  var mergeShadowGeometry = new THREE.Geometry();

  var trunkGeo = new THREE.CubeGeometry(20,100,10,1,1,1);
  trunkGeo.applyMatrix( new THREE.Matrix4().translate( new THREE.Vector3(0, 50, 0)));
  var shapeGeo = new THREE.CylinderGeometry( 0, 80, 220, 4, 1 );
  shapeGeo.applyMatrix( new THREE.Matrix4().translate( new THREE.Vector3(0, 140, 0)));
  var shadowPlaneGeo = new THREE.PlaneGeometry( 200,200,1,1);
  shadowPlaneGeo.applyMatrix( new THREE.Matrix4().rotateX( -Math.PI*.5));

  //temp meshes
  var trunkMesh = new THREE.Mesh( trunkGeo,null );
  var shapeMesh = new THREE.Mesh( shapeGeo, null );
  var shadowMesh = new THREE.Mesh( shadowPlaneGeo, null );

  var usePredefined = true;
  var forrestData = "9929,125,3124,0.05,1,-0.02,0.78,9929,82,2698,0.02,0.99,-0.13,0.83,9933,57,2474,0.02,1,-0.08,0.76,9963,-143,-117,-0.04,1,0.01,0.76,9932,-143,-198,-0.04,1,0.01,0.78,9956,-142,-257,-0.04,1,0.01,0.86,9956,-141,-275,-0.04,1,0.01,0.86,9959,-142,-384,-0.06,1,-0.01,0.94,9952,-144,-502,-0.06,1,-0.01,0.93,9952,-147,-662,0.03,1,-0.09,0.8,9938,-157,-767,0.03,1,-0.09,0.79,9872,123,2995,0.02,0.99,-0.13,0.83,9886,-149,-601,-0.06,1,-0.01,0.97,9862,-156,-789,0.03,1,-0.09,0.79,9804,-148,-159,-0.06,1,-0.01,0.79,9806,-150,-274,-0.06,1,-0.01,0.91,9775,-155,-551,-0.06,1,-0.01,0.9,9784,-155,-563,-0.06,1,-0.01,0.91,9767,-157,-634,-0.06,1,-0.01,0.93,9769,-157,-696,-0.06,1,-0.01,0.91,9798,-156,-716,-0.06,1,-0.01,0.9,9777,-158,-798,-0.06,1,-0.01,0.8,9769,-159,-814,-0.06,1,-0.01,0.77,9784,-161,-865,0.03,1,-0.09,0.8,9687,-156,-194,-0.06,1,-0.01,0.81,9715,-156,-352,-0.06,1,-0.01,0.84,9720,-161,-741,-0.06,1,-0.01,0.84,9727,-162,-850,-0.06,1,-0.01,0.77,9701,-192,-2944,0.03,1,-0.06,0.84,9637,-191,-2948,0.03,1,-0.06,0.84,9533,-186,-2900,0,1,-0.07,0.87,9446,292,4840,0.26,0.96,0.06,0.75,9399,-134,538,-0.04,0.98,-0.21,0.79,9399,-173,-2721,0,1,-0.07,0.77,9329,329,4749,0.26,0.96,0.06,0.87,9313,340,4646,0.26,0.96,0.06,0.8,9325,315,4436,0.23,0.97,-0.11,0.77,9237,345,4871,0.26,0.96,0.06,0.79,9227,359,4710,0.26,0.96,0.06,0.82,9245,357,4663,0.26,0.96,0.06,0.78,9233,361,4638,0.23,0.97,-0.11,0.83,9207,360,4582,0.23,0.97,-0.11,0.79,9244,336,4396,0.16,0.94,-0.31,0.78,9220,-186,-273,-0.06,1,-0.01,0.75,9231,-188,-519,-0.06,1,-0.01,0.77,9132,379,4496,0.36,0.93,0.02,0.78,9157,370,4460,0.36,0.93,0.02,0.77,9159,357,4417,0.16,0.94,-0.31,0.79,9130,344,4362,0.18,0.96,-0.23,0.76,9125,342,4352,0.18,0.96,-0.23,0.77,9146,-193,-511,-0.06,1,-0.01,0.83,9152,-193,-570,-0.06,1,-0.01,0.78,9062,-194,-122,-0.06,1,-0.01,0.82,9045,-194,-572,-0.01,1,0.02,0.76,9058,-194,-601,-0.01,1,0.02,0.8,9061,-192,-685,-0.01,1,0.02,0.8,8974,404,4515,0.07,0.99,-0.13,0.78,8985,396,4458,0.07,0.99,-0.13,0.78,9003,374,4389,0.18,0.96,-0.23,0.94,8978,319,4116,0.16,0.97,-0.18,0.8,9009,-17,1449,0.07,0.99,-0.1,0.8,8999,-193,-635,-0.01,1,0.02,0.83,8995,-190,-774,-0.01,1,0.02,0.79,8916,433,4921,0.33,0.94,0.08,0.84,8899,369,4291,0.18,0.96,-0.23,0.86,8914,-10,1528,-0.04,0.99,-0.09,0.84,8896,-21,1417,-0.04,0.99,-0.09,0.82,8911,-197,-489,-0.01,1,0.02,0.76,8804,343,4062,0.19,0.98,-0.08,0.98,8833,332,4002,0.19,0.98,-0.08,0.83,8808,-203,123,-0.07,1,-0.04,0.8,8833,-203,-236,-0.01,1,0.02,1.01,8808,-201,-334,-0.01,1,0.02,0.94,8822,-198,-459,-0.01,1,0.02,0.96,8847,-195,-592,-0.01,1,0.02,0.91,8822,-194,-673,-0.01,1,0.02,0.87,8840,-193,-709,-0.01,1,0.02,0.89,8830,-128,-1880,0.02,1,0.06,0.77,8812,-126,-1910,-0.01,1,-0.05,0.78,8734,437,4848,-0.14,0.92,-0.37,0.81,8746,425,4666,0.04,0.99,0.13,0.87,8761,347,4004,0.19,0.98,-0.08,1.01,8760,326,3726,0.18,0.98,-0.08,0.75,8732,-10,1606,-0.04,0.99,-0.11,0.82,8743,-14,1564,-0.04,0.99,-0.09,0.89,8732,-17,1203,0.06,1,-0.03,0.87,8729,-19,1162,0.06,1,-0.03,0.83,8738,-203,-266,-0.01,1,0.02,0.8,8753,-196,-593,-0.01,1,0.02,0.93,8725,-128,-1921,-0.01,1,-0.05,0.78,8674,425,4842,-0.14,0.92,-0.37,0.81,8663,415,4497,-0.04,0.99,-0.13,0.77,8682,383,4237,-0.04,0.99,-0.13,0.99,8644,351,3763,0.18,0.98,-0.08,0.86,8680,329,3584,0.18,0.98,-0.08,0.76,8648,-12,1194,0.06,1,-0.03,0.81,8681,-205,207,0.01,1,-0.02,0.77,8647,-213,-298,-0.24,0.97,0.09,0.91,8654,-203,-393,-0.24,0.97,0.09,0.92,8643,-202,-432,-0.24,0.97,0.09,0.75,8667,-148,-2316,-0.01,1,-0.05,0.76,8561,409,4491,-0.09,0.99,-0.06,0.88,8597,380,4244,-0.04,0.99,-0.13,1.05,8596,345,3680,-0.01,0.99,-0.12,0.9,8607,-18,1391,0.04,1,0.04,0.88,8576,-211,39,0,1,-0.06,0.85,8580,-214,-383,0.04,1,0.05,1,8586,-210,-448,0.04,1,0.05,0.88,8519,418,4700,-0.09,0.99,-0.06,0.76,8490,346,3700,-0.01,0.99,-0.12,0.88,8519,-7,1709,-0.04,0.99,-0.11,0.76,8509,-16,1638,-0.04,0.99,-0.11,0.77,8511,-10,1304,0.04,1,0.04,0.76,8484,-43,940,0.02,0.99,-0.17,0.77,8512,-92,725,0.03,0.97,-0.24,0.76,8512,-212,-364,0.04,1,0.05,0.91,8501,-200,-572,0.04,1,0.05,0.81,8503,-196,-658,0.05,1,0.06,0.79,8440,399,4517,-0.09,0.99,-0.06,0.82,8422,373,4242,-0.03,1,-0.09,0.76,8442,374,4240,-0.03,1,-0.09,1.01,8432,344,3685,-0.01,0.99,-0.12,0.86,8403,343,3683,-0.01,0.99,-0.12,0.92,8412,312,3494,-0.05,0.96,-0.28,0.84,8438,299,3445,-0.07,0.98,-0.16,0.84,8429,-19,1646,-0.08,0.99,-0.14,0.78,8446,-39,958,0.02,0.99,-0.17,0.84,8432,-86,741,0.03,0.97,-0.24,0.8,8421,-202,-473,0.04,1,0.05,0.81,8447,-200,-534,0.04,1,0.05,0.81,8326,375,4321,-0.12,0.99,-0.06,0.91,8365,349,3714,0.02,0.98,-0.19,0.85,8333,294,3448,-0.05,0.96,-0.28,0.83,8333,-7,1516,0.07,1,0.04,0.82,8362,-209,-299,0.05,1,0.03,0.79,8286,366,4200,-0.02,1,-0.09,0.78,8281,360,4135,-0.02,1,-0.09,0.91,8241,357,4068,0,0.99,0.11,0.91,8260,360,4037,0,0.99,0.11,0.86,8261,368,3966,0,0.99,0.11,0.94,8253,372,3924,0.08,1,0.02,0.87,8274,353,3724,0.02,0.98,-0.19,0.86,8259,99,2500,0.02,1,-0.08,0.77,8274,-74,774,0.03,0.97,-0.24,0.76,8281,-85,721,0.06,0.98,-0.18,0.81,8262,-105,609,0.06,0.98,-0.18,0.81,8268,-183,-2926,0,1,-0.07,0.78,8195,362,4168,-0.02,1,-0.09,0.78,8181,368,3776,0.04,0.98,-0.2,0.82,8198,-46,894,0.02,0.99,-0.17,0.75,8169,-97,626,0.06,0.98,-0.18,0.84,8193,-114,539,0.06,0.98,-0.18,0.77,8084,359,4211,-0.06,1,-0.02,0.81,8125,357,4129,-0.02,1,-0.09,0.84,8034,362,3988,-0.1,0.99,0.06,0.82,8004,-69,768,-0.02,0.98,-0.18,0.77,7942,351,4240,-0.06,1,-0.02,0.78,7961,352,4191,-0.06,1,-0.02,0.84,7951,-135,407,-0.02,0.98,-0.18,0.84,7928,-151,323,-0.02,0.98,-0.18,0.82,7923,-161,-1123,0.01,1,0.07,0.77,7849,345,4279,-0.06,1,0.03,0.81,7851,345,4175,-0.05,1,0,0.86,7857,-27,1352,-0.13,0.99,-0.03,0.82,7871,-36,1052,-0.21,0.92,-0.32,0.84,7883,-168,44,0.05,1,0.02,0.79,7864,-156,-879,0.14,0.99,-0.04,0.81,7792,-30,1519,-0.09,1,-0.02,0.75,7789,-65,1006,-0.07,1,-0.06,0.85,7767,-82,762,-0.07,1,-0.06,0.8,7769,-140,287,0.11,0.99,-0.04,0.81,7722,329,4416,-0.11,0.99,0.04,0.84,7702,333,4125,-0.12,0.99,0,0.93,7694,302,3812,-0.16,0.96,-0.24,0.76,7699,-70,1027,-0.07,1,-0.06,0.85,7704,-76,924,-0.07,1,-0.06,0.92,7681,-151,-93,0.12,0.99,0.06,0.78,7680,-133,-486,0.12,0.99,0.02,0.77,7724,-133,-796,0.14,0.99,-0.04,0.78,7722,-140,-991,0.14,0.99,-0.04,0.75,7606,318,4395,-0.11,0.99,0.04,0.83,7610,328,4308,-0.02,0.99,0.14,0.89,7631,325,4178,-0.12,0.99,0,0.86,7625,324,4122,-0.12,0.99,0,0.9,7619,-76,1012,-0.07,1,-0.06,0.91,7645,-149,-50,0.14,0.99,0.02,0.78,7543,307,4489,-0.11,0.99,0.04,0.76,7535,311,4408,-0.02,0.99,0.14,0.81,7556,316,4382,-0.02,0.99,0.14,0.81,7534,324,4255,-0.08,0.99,-0.08,0.81,7453,321,4329,-0.02,0.99,0.14,0.81,7486,-92,1072,-0.15,0.99,-0.05,0.82,7455,-103,960,-0.15,0.99,-0.05,0.81,7391,-100,-433,0.12,0.99,0.03,0.76,7329,-95,-311,0.12,0.99,0.03,0.76,7233,310,4360,-0.08,0.99,-0.08,0.82,7144,304,4464,0.11,0.99,-0.07,0.77,7140,276,4133,-0.15,0.98,-0.12,0.81,7156,-117,1031,-0.02,1,0.06,0.76,7061,327,4563,0.21,0.98,-0.08,0.85,7063,317,4443,0.21,0.98,-0.08,0.9,7048,285,4329,-0.15,0.98,-0.12,0.75,7068,278,4243,-0.15,0.98,-0.12,0.77,6991,342,4567,0.21,0.98,-0.08,0.79,7000,332,4464,0.21,0.98,-0.08,0.95,6892,371,4665,0.21,0.98,-0.08,0.89,6908,299,4365,0.03,0.95,-0.32,0.75,6884,242,4187,-0.16,0.98,-0.12,0.8,6846,400,4927,0.2,0.98,-0.07,0.76,6822,362,4521,0,0.9,-0.43,0.78,6849,323,4431,0.03,0.95,-0.32,0.91,6849,249,4249,-0.06,0.93,-0.37,0.79,6729,427,4960,0.2,0.98,-0.07,0.75,6726,412,4739,0.2,0.98,-0.07,0.92,6763,258,4284,-0.06,0.93,-0.37,0.82,6676,427,4814,0.2,0.98,-0.07,0.76,6678,422,4741,0.2,0.98,-0.07,0.76,6608,450,4938,0.2,0.98,-0.07,0.97,6603,441,4796,0.2,0.98,-0.07,0.75,6564,421,4661,-0.06,0.89,-0.45,0.76,6575,264,4369,-0.14,0.94,-0.32,0.76,6521,471,4968,0.2,0.98,-0.07,0.98,6503,464,4840,0.16,0.98,-0.1,0.86,6487,300,4441,-0.06,0.88,-0.47,0.85,6524,253,4359,-0.14,0.94,-0.32,0.82,6488,-37,-1764,0.07,0.99,-0.08,0.77,6436,471,4810,0.16,0.98,-0.1,0.96,6410,452,4742,-0.06,0.89,-0.45,0.97,6426,383,4605,-0.06,0.89,-0.45,0.97,6425,209,4274,-0.14,0.94,-0.32,0.85,6406,-43,-1913,0.07,0.99,-0.08,0.75,6349,498,4937,0.16,0.98,-0.1,0.92,6325,333,4524,-0.06,0.88,-0.47,0.89,6362,-40,-1918,0.07,0.99,-0.08,0.83,6348,-48,-2029,0.07,0.99,-0.08,0.84,6273,337,4537,-0.06,0.89,-0.45,0.93,6243,215,4332,-0.04,0.82,-0.57,0.82,6249,165,4120,-0.06,0.97,-0.23,0.82,6247,145,4029,-0.01,0.99,-0.14,0.77,6289,-3,-1526,0.07,0.99,-0.08,0.82,6271,-14,-1682,0.07,0.99,-0.08,0.8,6241,-23,-1822,0.07,0.99,-0.08,0.9,6262,-42,-2034,0.07,0.99,-0.08,0.93,6202,346,4565,-0.06,0.89,-0.45,0.99,6164,325,4529,-0.06,0.89,-0.45,1,6179,227,4354,-0.04,0.82,-0.57,0.93,6206,140,4005,-0.03,0.97,-0.24,0.75,6176,-32,-1997,0.07,0.99,-0.08,0.76,6087,414,4713,-0.06,0.89,-0.45,0.84,6121,332,4550,-0.06,0.89,-0.45,0.9,6085,255,4407,-0.06,0.88,-0.47,0.8,6130,161,4134,-0.06,0.97,-0.23,0.82,6101,146,4051,-0.01,0.99,-0.14,0.8,6097,-14,-1836,0.07,0.99,-0.08,1.01,6121,-28,-1995,0.07,0.99,-0.08,0.94,6021,363,4625,-0.06,0.89,-0.45,0.91,6014,311,4523,-0.06,0.89,-0.45,0.91,6005,284,4473,-0.06,0.89,-0.45,0.94,6014,188,4308,-0.04,0.82,-0.57,0.77,6024,162,4163,0,0.99,-0.16,0.76,6039,15,-1535,0.07,0.99,-0.08,0.86,6042,-6,-1795,0.07,0.99,-0.08,0.99,6040,-12,-1873,0.07,0.99,-0.08,0.98,6016,-29,-2105,0.07,0.99,-0.08,0.93,5925,452,4811,-0.06,0.89,-0.45,0.78,5944,156,4125,0,0.99,-0.16,0.75,5937,-7,-1897,0.07,0.99,-0.08,0.84,5960,-19,-2034,0.07,0.99,-0.08,0.93,5939,-27,-2156,0.07,0.99,-0.08,0.91,5966,-35,-2229,0.07,0.99,-0.08,0.84,5963,-44,-2343,0.07,0.99,-0.08,0.77,5869,155,4127,-0.08,0.97,-0.24,0.8,5881,26,-1546,0.07,0.99,-0.08,0.85,5846,9,-1791,0.07,0.99,-0.08,0.75,5868,2,-1854,0.07,0.99,-0.08,0.78,5860,-4,-1935,0.07,0.99,-0.08,0.78,5869,-15,-2063,0.07,0.99,-0.08,0.92,5884,-42,-2396,0.07,0.99,-0.08,0.77,5790,258,4451,-0.06,0.89,-0.45,0.75,5803,212,4361,-0.06,0.88,-0.47,0.78,5768,159,4180,-0.08,0.97,-0.24,0.79,5778,-18,-2194,0.07,0.99,-0.08,0.95,5766,-30,-2349,0.07,0.99,-0.08,0.85,5710,164,4218,-0.08,0.97,-0.24,0.76,5718,144,2761,-0.03,1,0.02,0.83,5691,37,-1583,-0.01,1,0.08,0.85,5726,11,-1880,0.07,0.99,-0.08,1.01,5694,-7,-2127,0.07,0.99,-0.08,0.87,5707,-11,-2172,0.07,0.99,-0.08,0.92,5701,-35,-2473,0.07,0.99,-0.08,0.82,5632,147,2668,0.16,0.82,0.55,0.76,5649,18,-1863,0.07,0.99,-0.08,0.76,5612,-6,-2193,0.07,0.99,-0.08,0.85,5623,-14,-2285,0.07,0.99,-0.08,0.83,5604,-19,-2368,0.04,0.99,-0.11,0.87,5610,-27,-2434,0.04,0.99,-0.11,0.81,5633,-42,-2567,0.04,0.99,-0.11,0.81,5552,3,-2141,0.07,0.99,-0.08,0.83,5570,-10,-2285,0.07,0.99,-0.08,0.85,5561,-48,-2643,0.04,0.99,-0.11,0.83,5479,171,2594,-0.06,0.97,-0.25,0.78,5462,20,-1418,-0.01,1,0.08,0.75,5474,-8,-2311,0.04,0.99,-0.11,0.79,5447,-34,-2556,0.04,0.99,-0.11,0.82,5453,-44,-2650,0.04,0.99,-0.11,0.87,5484,-95,-2963,0.01,0.98,-0.17,0.77,5364,25,-1497,-0.01,1,0.08,0.79,5378,-57,-2754,0.01,0.98,-0.17,0.87,5396,-87,-2919,0.01,0.98,-0.17,0.84,5285,32,-1591,-0.01,1,0.08,0.8,5288,-65,-2798,0.01,0.98,-0.17,0.75,5281,-74,-2849,0.01,0.98,-0.17,0.86,5226,124,2345,-0.02,1,-0.03,0.76,5243,-42,-2672,0.01,0.98,-0.17,0.84,5122,27,-1555,-0.01,1,0.08,0.77,5159,-91,-2926,-0.07,0.98,-0.19,0.79,5124,-101,-2968,-0.07,0.98,-0.19,0.75,5084,22,-1485,-0.01,1,0.08,0.75,4823,1,-282,0.01,0.99,-0.11,0.81,4755,-20,-537,-0.02,1,-0.07,0.81,4741,-25,-636,0.02,1,0.05,0.76,4770,12,-2214,0,0.99,-0.11,0.78,4662,-20,-542,-0.02,0.99,-0.12,0.84,4689,-21,-555,0.06,0.99,-0.1,0.82,4651,18,-2160,0,0.99,-0.11,0.77,4565,168,4197,0.02,0.99,-0.15,0.79,4590,150,4086,0.02,0.99,-0.15,0.79,4561,-7,-405,-0.03,0.99,-0.11,0.88,4603,-1,-2297,-0.06,0.98,-0.19,0.76,4484,231,4504,0.06,0.87,-0.49,0.78,4502,162,4168,-0.16,0.98,-0.08,0.81,4517,137,3983,0,1,0.01,0.79,4504,-6,-378,-0.03,1,-0.09,0.87,4528,-19,-508,-0.02,0.99,-0.12,0.88,4497,-33,-598,-0.03,0.98,-0.18,0.79,4491,-21,-842,-0.04,1,0.07,0.77,4485,39,-1955,0,0.99,-0.11,0.75,4509,-2,-2273,-0.06,0.98,-0.19,0.82,4446,271,4554,0,0.74,-0.68,0.79,4413,148,3924,0.23,0.97,0.02,0.79,4442,-12,-414,-0.03,0.99,-0.11,0.88,4441,-11,-2300,-0.06,0.98,-0.19,0.85,4327,266,4546,0.06,0.87,-0.49,0.84,4337,209,4448,0.06,0.87,-0.49,0.88,4367,151,4261,-0.03,1,-0.06,0.94,4370,144,4138,-0.03,1,-0.06,0.78,4326,161,4069,0.35,0.93,0.14,0.77,4355,164,3964,0.4,0.91,0.04,0.79,4336,192,3568,0.4,0.91,0.04,0.78,4367,2,44,-0.16,0.99,-0.03,0.75,4363,-2,-156,-0.06,1,0.02,0.76,4363,-2,-212,-0.06,1,0.01,0.78,4323,-28,-528,-0.04,0.99,-0.11,0.87,4322,1,-2205,-0.06,0.98,-0.19,0.86,4358,-15,-2298,-0.06,0.98,-0.19,0.86,4335,-33,-2372,-0.09,0.97,-0.21,0.84,4277,272,4551,0.06,0.87,-0.49,0.77,4247,175,4268,0.2,0.98,-0.09,0.89,4256,171,4246,0.2,0.98,-0.09,0.78,4281,167,4141,0.35,0.93,0.14,0.76,4271,180,4095,0.49,0.83,0.26,0.82,4259,232,3492,0.41,0.91,0.08,0.76,4263,231,3481,0.41,0.91,0.08,0.81,4257,270,3282,0.12,0.99,0.07,0.75,4282,-15,-400,-0.04,0.99,-0.11,0.82,4270,-28,-872,-0.05,1,0.06,0.97,4257,8,-2152,-0.06,0.98,-0.19,0.8,4274,-62,-2479,-0.09,0.97,-0.21,0.83,4279,-98,-2650,-0.09,0.97,-0.21,0.8,4174,337,4618,0.05,0.65,-0.76,0.81,4199,226,4439,0.17,0.9,-0.41,0.85,4184,218,4410,0.23,0.94,-0.27,0.86,4187,190,4297,0.2,0.98,-0.09,0.84,4161,275,3509,0.41,0.91,0.08,0.79,4165,-53,227,-0.25,0.96,0.13,0.77,4187,-22,-159,-0.13,0.98,0.12,0.78,4205,-32,-514,-0.04,0.99,-0.11,0.96,4173,-32,-1003,-0.03,1,0.03,0.9,4190,-11,-2208,-0.09,0.97,-0.21,0.78,4174,-89,-2564,-0.09,0.97,-0.21,0.78,4180,-103,-2654,0,0.99,-0.11,0.76,4088,432,4804,-0.07,0.84,-0.54,0.76,4118,387,4727,0.04,0.93,-0.36,0.76,4110,298,3477,0.26,0.96,-0.06,0.81,4123,90,1968,-0.12,0.98,-0.17,0.78,4093,-24,-318,-0.1,0.99,-0.05,0.78,4113,-25,-391,-0.1,0.99,-0.05,0.85,4094,-45,-576,-0.04,0.99,-0.13,1.06,4085,-48,-680,-0.02,1,0.04,1.09,4121,-40,-797,-0.05,1,0.06,0.77,4050,121,2654,-0.01,0.99,-0.1,0.79,4013,119,2638,-0.01,0.99,-0.1,0.8,4037,103,2344,-0.02,1,-0.02,0.75,4004,27,1746,0.02,0.97,-0.23,0.77,4001,10,1671,0.02,0.97,-0.22,0.78,4036,-33,-1134,-0.03,1,0.03,0.93,4003,-97,-2575,-0.09,0.99,-0.07,0.76,3941,360,3671,0.4,0.91,0.09,0.79,3936,97,2138,0.02,1,-0.04,0.75,3951,40,1798,0.02,0.97,-0.22,0.78,3938,1,1676,-0.16,0.91,-0.39,0.77,3942,-33,1525,-0.19,0.96,-0.2,0.77,3950,-41,1482,-0.19,0.96,-0.2,0.77,3929,-50,-528,-0.09,0.99,-0.04,0.8,3931,-51,-556,-0.09,0.99,-0.04,0.78,3930,-40,-1017,-0.03,1,0.03,0.97,3920,-32,-1164,0,1,0.08,0.87,3937,-105,-2617,-0.09,0.99,-0.07,0.8,3920,-114,-2721,-0.09,0.99,-0.07,0.77,3867,395,3637,0.4,0.91,0.09,0.77,3879,146,2773,-0.02,0.95,-0.32,0.82,3865,109,2533,0.06,1,-0.05,0.87,3849,105,2461,0.1,0.98,-0.15,0.9,3867,103,2426,-0.02,1,-0.01,0.75,3868,101,2343,-0.02,1,-0.01,0.76,3846,-36,1616,-0.23,0.96,-0.15,0.76,3848,-44,-942,0.01,1,-0.01,0.87,3881,-42,-1015,-0.03,1,0.03,0.81,3768,345,3237,0.23,0.9,-0.37,0.75,3776,132,2738,-0.02,0.95,-0.32,0.86,3781,123,2696,-0.01,0.99,-0.1,0.89,3782,108,2435,0.1,0.98,-0.15,0.81,3773,100,2370,-0.02,1,-0.01,0.87,3763,98,2256,-0.02,1,-0.01,0.79,3764,98,2235,-0.02,1,-0.01,0.81,3771,-55,-646,-0.02,1,0.04,1.01,3793,-53,-696,-0.02,1,0.04,0.95,3692,172,2873,-0.05,0.95,-0.31,0.76,3726,126,2711,0.06,1,-0.05,0.89,3722,99,2328,-0.02,1,-0.01,0.79,3725,-56,-633,-0.01,1,0.01,0.9,3709,-54,-689,-0.02,1,0.04,0.88,3605,414,4212,0.24,0.95,0.2,0.77,3644,420,3302,0.35,0.87,-0.36,0.79,3634,132,2720,0.06,1,-0.02,0.79,3637,127,2469,0.1,0.98,-0.15,0.8,3616,87,2121,-0.06,1,-0.07,0.76,3615,-58,-446,-0.02,1,-0.03,0.78,3565,398,4320,0.03,0.97,0.26,0.82,3526,140,2804,-0.07,0.95,-0.29,0.82,3566,137,2785,0.06,1,-0.02,1,3564,133,2603,0.1,0.99,0.09,0.83,3564,139,2534,0.1,0.99,0.09,0.99,3535,143,2507,0.1,0.98,-0.15,0.81,3545,124,2393,0.1,0.98,-0.15,0.81,3525,107,2285,-0.01,0.94,-0.33,0.79,3569,94,2212,0.06,0.99,-0.1,0.76,3470,412,4281,0.03,0.97,0.26,0.86,3462,146,2774,0.25,0.9,-0.36,0.85,3446,142,2644,0.1,0.99,0.09,1.01,3448,153,2514,0.1,0.98,-0.15,0.82,3376,405,4327,0.09,1,0.04,0.81,3396,475,4092,0.07,0.94,0.32,0.82,3362,117,2314,0.06,0.99,-0.1,0.76,3315,156,2684,0.37,0.87,-0.32,1.04,3328,161,2569,0.1,0.99,0.09,0.98,3295,148,2406,-0.01,0.94,-0.33,0.85,3287,126,2343,-0.01,0.94,-0.33,0.8,3282,-78,-85,0.07,0.98,0.18,0.77,3224,406,3125,0.19,0.83,-0.52,0.9,3237,352,3049,0.19,0.82,-0.55,0.83,3247,228,2800,0.37,0.87,-0.32,0.82,3211,171,2590,0.1,0.99,0.09,0.9,3228,174,2531,0.1,0.99,0.09,0.9,3221,-168,576,0.11,0.99,0.05,0.77,3229,-168,541,0.14,0.99,0.04,0.78,3248,-168,491,0.14,0.99,0.04,0.76,3202,-111,104,0.04,0.98,0.2,0.84,3239,-69,-119,0.07,0.98,0.18,0.81,3149,220,2665,0.37,0.87,-0.32,0.81,3169,182,2586,0.37,0.87,-0.32,0.9,3151,-149,344,0.11,0.99,0.05,0.86,3158,-105,81,0.04,0.98,0.2,0.88,3133,-118,-2790,-0.04,1,-0.06,0.89,3066,488,4123,0.11,0.92,0.37,0.78,3087,290,2783,0.37,0.87,-0.32,0.81,3047,164,2366,0.19,0.96,-0.22,0.8,3070,-145,437,0.11,0.99,0.05,0.86,3048,-110,148,0.08,0.98,0.2,0.79,3041,-35,-927,0,1,0.02,0.78,3084,-119,-2631,-0.07,1,0.02,0.78,2984,446,3093,0.34,0.91,-0.23,0.86,2989,-133,305,0.1,0.99,0.1,0.86,2999,-33,-1014,0,1,0.02,0.8,3008,-32,-1057,0,1,0.02,0.83,2999,-28,-1258,0,1,0.02,0.82,2988,-130,-2865,-0.05,1,-0.08,0.89,2994,-134,-2917,-0.05,1,-0.08,0.83,2911,-123,285,0.1,0.99,0.1,0.85,2900,-59,-50,0.07,0.98,0.18,0.76,2912,-29,-1180,0,1,0.02,0.77,2883,-27,-1269,0,1,0.02,0.79,2900,-143,-2971,-0.05,1,-0.08,0.97,2843,476,4250,0.08,0.96,0.27,0.75,2825,500,4177,0.13,0.93,0.34,0.75,2834,421,2779,0.45,0.84,-0.3,0.76,2819,-136,-2631,-0.04,1,0.05,0.82,2756,-143,-2925,-0.02,1,-0.1,0.94,2665,-52,-952,-0.01,1,0.08,0.75,2665,-143,-2828,0.04,1,-0.02,0.83,2583,-131,-2554,0.01,1,-0.07,0.78,2603,-139,-2768,0.04,1,-0.02,0.8,2499,-132,-2592,0.04,1,-0.02,0.78,2247,-125,-2475,-0.02,1,0.02,0.83,2264,-125,-2636,0.03,1,-0.03,0.81,2201,260,4684,-0.13,0.93,0.33,0.83,2193,323,4498,-0.04,0.72,0.69,0.89,2189,380,4438,-0.16,0.86,0.49,0.98,2207,453,4304,-0.16,0.91,0.39,0.77,2167,468,4264,-0.18,0.84,0.51,0.97,2169,-131,-2321,0.01,1,0.06,0.83,2174,-127,-2427,-0.02,1,0.02,0.85,2101,433,4307,-0.16,0.91,0.39,0.79,2119,464,4253,-0.18,0.84,0.51,0.9,2088,-133,-2103,-0.06,1,-0.01,0.83,2050,413,4333,-0.16,0.91,0.39,0.76,2014,447,4245,-0.18,0.84,0.51,0.89,2036,-19,321,0.11,0.99,-0.07,0.78,2044,-135,-2094,-0.01,1,-0.01,0.89,2040,-134,-2229,0.01,1,0.06,0.8,1929,219,4674,-0.2,0.95,0.22,0.97,1961,251,4565,-0.2,0.95,0.22,0.85,1936,366,4382,-0.16,0.86,0.49,1.01,1966,468,4204,0.05,0.79,0.61,0.98,1936,123,1834,0.03,0.99,-0.12,0.8,1935,-56,-1419,0.03,0.99,-0.12,0.8,1950,-123,-1987,0.03,0.99,-0.11,0.85,1958,-130,-2452,-0.02,1,0.02,0.89,1859,212,4924,-0.34,0.93,-0.1,0.83,1862,163,1986,0.06,0.85,-0.52,0.86,1861,151,1967,0.06,0.85,-0.52,0.83,1885,-45,-1155,-0.02,1,0.01,0.81,1883,-91,-1799,-0.03,0.98,-0.18,0.85,1841,-134,-2287,-0.02,1,0.02,0.77,1852,-127,-2677,-0.04,1,0.01,0.77,1842,-115,-2963,-0.01,1,0.05,0.78,1806,182,4759,-0.13,0.99,0.04,0.87,1806,423,4233,-0.12,0.77,0.62,0.9,1800,266,2152,0.05,0.86,-0.51,0.81,1786,129,1870,-0.01,0.98,-0.22,0.84,1805,96,1641,-0.01,1,-0.03,0.8,1791,80,1181,0.03,0.99,-0.13,0.79,1775,34,479,0.05,0.99,-0.12,0.78,1776,6,263,0.11,0.99,-0.07,0.83,1801,2,216,0.14,0.99,0.01,0.82,1792,-81,-1727,-0.03,0.98,-0.18,0.91,1779,-98,-1843,0.06,0.99,-0.13,0.8,1810,-126,-2037,0.01,0.99,-0.11,0.85,1768,-134,-2113,-0.02,0.99,-0.16,0.85,1794,-127,-2713,-0.01,1,0.03,0.78,1777,-121,-2869,-0.01,1,0.05,0.82,1724,167,4924,-0.15,0.99,0.01,0.82,1723,206,4594,-0.16,0.86,0.49,0.98,1707,113,1803,-0.01,0.98,-0.22,0.91,1713,78,1263,-0.05,1,0.08,0.81,1717,52,598,0.05,0.99,-0.12,0.79,1713,-40,-1077,0.12,0.99,0.01,0.78,1680,-33,-1269,0.13,0.99,0.02,0.86,1687,-44,-1390,0.06,1,-0.08,0.88,1713,-80,-1733,0.06,0.99,-0.13,0.77,1681,-101,-1893,0.03,0.98,-0.21,0.76,1608,177,4609,-0.16,0.86,0.49,0.96,1639,370,4268,-0.12,0.77,0.62,0.85,1643,112,1803,-0.01,0.98,-0.22,0.84,1613,104,1768,-0.01,0.98,-0.22,0.77,1645,-29,-1232,0.13,0.99,0.02,0.82,1601,-93,-1869,0.03,0.98,-0.21,0.88,1642,-113,-1953,0.03,0.98,-0.21,0.76,1546,293,2171,0.05,0.84,-0.54,0.78,1542,141,1887,0.12,0.9,-0.43,0.87,1567,95,1691,-0.08,0.99,-0.09,0.81,1563,54,555,0.06,0.99,-0.11,0.79,1549,-138,-2435,-0.02,1,0.02,0.84,1547,-155,-2599,-0.11,0.98,-0.15,0.76,1473,151,4793,-0.07,1,-0.01,0.86,1480,151,4644,-0.07,1,-0.01,0.83,1461,362,2270,0.05,0.84,-0.54,0.8,1442,28,88,0.07,1,-0.01,0.79,1488,24,6,0.07,1,-0.01,0.84,1409,147,4678,-0.07,1,-0.01,0.84,1403,275,2127,0.12,0.9,-0.43,0.76,1402,64,761,-0.01,1,0.01,0.79,1396,32,284,0.07,1,0.01,0.77,1364,33,149,0.07,1,-0.01,0.82,1373,32,44,0.07,1,-0.01,0.76,1321,142,4843,-0.07,1,-0.01,0.76,1296,39,305,0.05,0.99,-0.13,0.76,1219,451,2524,-0.29,0.87,-0.4,0.77,1204,51,419,-0.06,0.99,-0.12,0.82,1200,40,-29,-0.06,0.99,0.1,0.81,1157,470,2746,-0.2,0.97,-0.12,0.75,1154,450,2593,-0.2,0.97,-0.12,0.82,1158,57,605,-0.09,0.99,0.09,0.75,1052,427,2824,-0.52,0.85,-0.09,0.8,1068,423,2604,-0.29,0.95,0.07,0.77,1043,383,2456,-0.36,0.91,-0.21,0.84,1075,389,2426,-0.36,0.91,-0.21,0.76,985,386,2818,-0.52,0.85,-0.09,0.87,1007,396,2792,-0.52,0.85,-0.09,0.78,980,394,2632,-0.29,0.95,0.07,1.02,972,302,2280,-0.26,0.91,-0.31,0.79,908,361,2784,-0.29,0.95,0.07,0.85,920,372,2687,-0.29,0.95,0.07,1.02,880,280,2294,-0.26,0.91,-0.31,1.05,801,324,2844,-0.29,0.95,0.07,0.94,830,292,2403,-0.31,0.93,-0.18,1.05,800,267,2323,-0.26,0.91,-0.31,1.14,753,308,2840,-0.38,0.9,0.2,0.83,732,276,2496,-0.31,0.93,-0.18,1.08,745,256,2351,-0.31,0.95,-0.07,0.98,659,256,3038,-0.43,0.87,-0.26,0.86,661,260,2879,-0.38,0.9,0.2,1.04,652,277,2643,-0.31,0.93,-0.18,1.22,653,227,2362,-0.31,0.95,-0.07,0.88,577,267,4064,-0.08,0.89,0.44,0.79,596,225,2948,-0.37,0.93,0.07,0.98,580,242,2824,-0.07,0.96,0.26,1.12,598,252,2605,-0.31,0.93,-0.18,1.27,597,173,2236,-0.27,0.73,-0.62,1.1,585,-103,-2295,0.06,0.91,-0.42,0.83,506,250,4003,-0.35,0.92,-0.16,0.78,508,202,2986,-0.14,0.98,0.12,0.85,500,221,2563,-0.1,0.96,-0.28,0.84,514,189,2426,-0.31,0.93,-0.18,1.19,483,166,2298,-0.31,0.95,-0.07,1.12,482,-25,-2151,0.07,0.88,-0.46,0.79,529,-100,-2297,0.06,0.91,-0.42,0.78,519,-153,-2410,0.06,0.91,-0.42,0.76,410,215,2563,-0.07,0.93,-0.37,1.2,424,197,2501,-0.03,0.96,-0.26,0.99,418,150,2328,-0.03,0.97,-0.25,1.01,448,-33,-2171,0.07,0.88,-0.46,0.96,401,-52,-2215,0.07,0.88,-0.46,0.96,414,-85,-2279,0.06,0.91,-0.42,0.82,324,132,4555,-0.03,1,0.03,0.84,360,174,4243,-0.07,0.94,0.33,0.91,365,197,4008,-0.41,0.9,-0.17,0.87,348,169,3109,-0.26,0.92,-0.29,0.75,362,198,2907,-0.09,0.95,0.28,0.93,364,221,2830,-0.09,0.95,0.28,0.77,366,261,2689,-0.02,0.94,-0.34,0.77,325,-42,-2203,0.01,0.9,-0.44,0.99,322,-92,-2305,0,0.89,-0.46,0.91,348,-198,-2563,0.02,0.98,-0.2,0.82,370,-207,-2609,0.02,0.98,-0.2,0.79,279,164,4036,-0.33,0.92,-0.23,0.87,254,161,3013,-0.15,0.95,0.28,0.88,278,231,2628,-0.07,0.93,-0.37,0.98,279,166,2409,-0.03,0.97,-0.25,0.86,241,153,2366,-0.05,0.96,-0.27,0.93,244,-102,-2325,0.01,0.89,-0.46,0.94,259,-160,-2437,0.01,0.89,-0.46,0.93,192,127,4595,-0.03,1,0.03,0.83,208,130,4447,-0.02,0.99,0.11,0.96,165,143,4222,-0.26,0.95,0.19,0.89,177,151,4201,-0.26,0.95,0.19,0.76,204,166,4151,-0.33,0.92,-0.23,0.86,161,200,2800,-0.17,0.96,0.24,0.88,182,239,2729,-0.01,0.88,0.48,0.8,164,196,2549,-0.08,0.96,-0.26,0.78,163,-39,-2195,-0.11,0.97,-0.21,0.99,170,-58,-2239,0.01,0.9,-0.44,1.01,204,-235,-2774,-0.07,0.99,-0.07,0.78,184,-238,-2793,-0.07,1,-0.06,0.86,206,-239,-2976,-0.04,1,0,0.88,116,129,4440,-0.02,0.99,0.11,0.94,89,134,4130,-0.13,0.99,-0.03,0.9,85,131,4058,-0.13,0.99,-0.03,0.76,81,218,2766,-0.01,0.88,0.48,0.77,112,231,2707,-0.14,0.95,-0.29,0.79,86,208,2633,-0.1,0.97,-0.22,0.77,113,197,2571,-0.1,0.97,-0.23,0.76,110,-107,-2337,0.01,0.89,-0.46,0.84,104,-123,-2368,0.01,0.89,-0.46,1.01,113,-179,-2475,0.01,0.89,-0.46,0.89,104,-214,-2543,0.01,0.89,-0.46,1.03,123,-228,-2592,-0.07,0.99,-0.07,0.96,102,-233,-2636,-0.07,0.99,-0.07,0.81,100,-239,-2722,-0.07,0.99,-0.07,0.93,32,-47,-2179,0.02,0.97,-0.23,0.8,31,-86,-2297,-0.08,0.88,-0.47,0.96,20,-113,-2345,-0.08,0.88,-0.47,0.86,27,-120,-2359,-0.08,0.88,-0.47,0.91,46,-175,-2468,-0.08,0.88,-0.47,0.87,3,-224,-2554,0.02,0.97,-0.24,0.78,35,-233,-2596,-0.02,1,-0.06,0.82,4,-238,-2670,-0.02,1,-0.06,0.95,30,-240,-2707,-0.02,1,-0.06,0.92,22,-244,-2854,-0.02,1,-0.01,1,-78,-47,-2183,-0.14,0.89,-0.44,0.87,-47,-49,-2191,0.02,0.97,-0.23,0.77,-80,-96,-2285,-0.14,0.9,-0.41,0.87,-32,-128,-2364,-0.08,0.88,-0.47,1.05,-41,-171,-2445,-0.08,0.88,-0.47,0.75,-63,-232,-2590,0.02,0.97,-0.24,1.09,-60,-247,-2982,-0.02,1,-0.01,0.85,-154,119,4488,-0.02,0.99,0.11,0.83,-143,112,4286,-0.13,0.99,-0.06,0.86,-143,97,3625,-0.04,0.96,0.26,0.77,-159,-100,-2267,-0.14,0.9,-0.41,0.95,-155,-158,-2397,-0.14,0.9,-0.41,0.76,-128,-184,-2455,-0.08,0.88,-0.47,0.77,-146,-208,-2503,0.02,0.97,-0.24,1.1,-118,-238,-2632,-0.02,1,-0.06,1.06,-195,112,4362,-0.11,0.99,-0.08,0.86,-219,105,4305,-0.11,0.99,-0.08,0.76,-210,101,4245,-0.11,0.99,-0.08,0.82,-210,88,4102,-0.2,0.97,-0.13,0.8,-222,80,3675,-0.04,0.96,0.26,0.77,-231,-243,-2678,-0.02,1,-0.06,1.1,-280,102,4327,-0.07,0.99,-0.08,0.81,-271,98,4266,-0.07,0.99,-0.08,0.79,-306,92,4236,-0.09,0.99,-0.11,0.81,-296,61,4028,-0.2,0.97,-0.13,0.83,-307,46,3936,-0.2,0.97,-0.13,0.81,-304,-107,-2256,0.02,0.86,-0.52,0.89,-273,-142,-2329,-0.07,0.91,-0.4,0.84,-305,-189,-2434,0.01,0.97,-0.24,0.83,-274,-208,-2512,0.01,0.97,-0.24,1.05,-311,-238,-2639,0.01,0.97,-0.24,0.88,-303,-249,-2902,-0.01,1,0.01,0.9,-367,107,4520,-0.07,1,0.02,0.97,-393,41,4019,-0.11,0.97,-0.2,0.81,-351,-225,-2587,0.04,0.97,-0.22,0.85,-377,-237,-2645,0.04,0.97,-0.22,0.97,-442,100,4424,-0.07,0.99,-0.08,0.81,-437,85,4282,-0.09,0.99,-0.11,0.87,-445,73,4206,-0.11,0.97,-0.2,0.76,-444,71,4193,-0.11,0.97,-0.2,0.8,-440,-49,-2161,0.06,0.92,-0.39,0.79,-442,-99,-2246,0.02,0.86,-0.52,0.8,-431,-144,-2321,0.02,0.86,-0.52,0.9,-528,94,4609,-0.07,1,0.02,0.91,-554,94,4533,-0.11,0.99,0,0.92,-540,95,4503,-0.11,0.99,0,0.93,-553,87,4400,-0.12,0.99,-0.09,0.77,-526,82,4321,-0.09,0.99,-0.11,0.94,-535,72,4252,-0.11,0.97,-0.2,0.83,-543,-93,-2240,0.02,0.86,-0.52,0.78,-520,-179,-2390,-0.04,0.98,-0.19,0.83,-554,-251,-2858,-0.01,1,0.01,0.8,-639,79,4910,-0.13,0.99,0.03,0.78,-624,86,4494,-0.11,0.99,0,0.78,-640,84,4471,-0.11,0.99,0,0.9,-633,70,4323,-0.12,0.99,-0.09,0.84,-636,65,4274,-0.12,0.96,-0.24,0.77,-600,56,4215,-0.14,0.97,-0.21,0.84,-610,-55,-2181,0.1,0.88,-0.47,0.79,-609,-185,-2401,-0.04,0.98,-0.19,0.81,-599,-254,-2989,-0.02,1,-0.02,0.77,-694,76,4772,-0.13,0.99,0.03,0.76,-682,79,4718,-0.11,0.99,0,0.82,-702,66,4376,-0.11,0.99,-0.11,0.97,-686,59,4276,-0.12,0.96,-0.24,0.94,-691,22,4085,0.03,0.99,0.13,0.8,-778,69,4631,-0.11,0.99,0,0.76,-789,19,4131,0.03,0.99,0.13,0.83,-773,32,3982,0.01,1,0,0.8,-777,34,3934,0.19,0.92,0.34,0.75,-799,-191,-2397,0.04,0.97,-0.26,0.78,-854,53,4415,-0.11,0.99,-0.11,0.76,-879,43,4355,-0.11,0.99,-0.11,0.89,-844,23,4114,0.03,0.99,0.13,0.77,-848,-186,-2386,0.01,0.88,-0.48,0.75,-848,-187,-2392,0.04,0.97,-0.26,0.75,-921,28,4181,0.08,1,-0.02,0.94,-955,-124,-2275,0.01,0.88,-0.48,0.81,-995,36,4405,-0.11,0.99,-0.11,0.95,-1030,36,4343,0.05,1,0,0.97,-995,33,4147,0.06,1,-0.01,0.84,-1093,39,4425,0.05,1,0,0.81,-1101,40,4287,0.05,1,0,0.96,-1078,80,3887,0.13,0.97,0.21,0.86,-1120,102,3810,0.13,0.97,0.21,0.81,-1073,58,-418,0,1,0,0.76,-1198,116,3771,0.05,0.99,0.14,0.82,-1257,48,4198,0.06,1,-0.01,0.86,-1245,66,4061,0.14,0.97,0.18,0.86,-1360,51,4240,0.02,1,0.04,0.75,-1399,53,-678,-0.02,1,-0.02,0.75,-1493,75,1560,0.03,1,0.01,0.76,-1476,74,1206,0.06,1,0.01,0.77,-1496,75,1102,0.01,1,-0.01,0.77,-1575,78,1296,0.01,1,-0.01,0.75,-1585,77,1196,0.01,1,-0.01,0.86,-1673,79,1524,0.02,1,0.02,0.84,-1637,73,1321,-0.12,0.99,0.04,0.92,-1727,66,1209,-0.12,0.99,0.04,0.84,-1753,71,1024,-0.03,1,-0.02,0.9,-1751,69,913,-0.03,1,-0.02,0.82,-1803,74,1386,-0.11,0.99,0,0.86,-1815,68,974,-0.03,1,-0.02,0.89,-1822,-16,-984,-0.09,0.98,-0.17,0.75,-1895,64,1161,-0.11,0.99,0,0.86,-1871,-122,-1277,-0.05,0.91,-0.42,0.75,-1894,-141,-1718,-0.1,0.99,0.06,0.77,-1953,109,1618,0.08,0.99,-0.12,0.84,-1957,90,1464,0.08,0.99,-0.12,0.79,-1990,81,1366,0.08,0.99,-0.12,0.75,-1978,55,1090,-0.11,0.99,0,0.81,-1984,-145,-1794,-0.1,0.99,0.06,0.77,-1952,-136,-1915,-0.09,0.99,0.04,0.82,-2061,118,1616,0.08,0.99,-0.12,0.86,-2033,94,1441,0.08,0.99,-0.12,0.89,-2066,62,1167,0.08,0.99,-0.12,0.8,-2055,-152,-1787,-0.1,0.99,0.06,0.79,-2067,-145,-1954,-0.09,0.99,0.05,0.84,-2156,88,1312,0.08,0.99,-0.12,0.85,-2153,-152,-1971,-0.09,0.99,0.05,0.81,-2146,-188,-2205,0.01,0.99,-0.16,0.86,-2221,82,1224,0.08,0.99,-0.12,0.93,-2223,-189,-2368,0.08,1,-0.04,0.86,-2304,125,1507,0.08,0.99,-0.12,0.97,-2273,79,1164,0.08,0.99,-0.12,0.77,-2297,-169,-2098,0.01,0.99,-0.16,0.92,-2276,-189,-2475,0.08,1,-0.04,0.83,-2387,139,1571,0.08,0.99,-0.12,0.93,-2384,132,1511,0.08,0.99,-0.12,0.77,-2350,109,1354,0.08,0.99,-0.12,0.79,-2382,77,1073,0.08,0.99,-0.12,0.78,-2397,-165,-1910,-0.02,1,0.05,0.84,-2387,-177,-2393,0.05,1,0.04,0.92,-2455,65,4737,0.07,0.99,0.12,0.82,-2475,228,1799,0.26,0.89,-0.38,0.86,-2476,137,1491,0.08,0.99,-0.12,0.94,-2455,-181,-2206,0.05,1,0.04,1,-2443,-182,-2503,0.05,0.99,-0.1,0.85,-2475,-190,-2578,0.05,0.99,-0.15,0.77,-2431,-196,-2604,0.05,0.99,-0.15,0.84,-2515,60,4923,0.09,1,0.01,0.78,-2516,61,4847,0.09,1,0.01,0.85,-2521,68,4753,0.07,0.99,0.12,0.84,-2553,299,1926,0.06,0.95,0.3,0.8,-2535,109,1236,0.06,0.99,-0.13,0.87,-2537,-175,-2177,0.08,1,0.02,0.95,-2521,-175,-2244,0.07,1,0.04,1,-2511,-172,-2353,0.07,1,0.04,0.76,-2520,-170,-2426,0.05,0.99,-0.1,0.99,-2557,-176,-2501,0.05,0.99,-0.1,0.98,-2541,-248,-2933,0.03,0.99,-0.11,0.82,-2640,70,4980,0.09,1,0.01,0.83,-2638,72,4801,0.09,1,0.01,0.85,-2632,221,1727,-0.05,0.96,-0.27,0.91,-2623,-168,-2161,0.08,1,0.02,0.76,-2614,-193,-2613,0.02,0.98,-0.17,0.94,-2625,-217,-2751,0.02,0.98,-0.17,0.89,-2640,-220,-2769,0.02,0.98,-0.17,0.87,-2638,-229,-2820,0.02,0.98,-0.17,0.84,-2638,-242,-2907,0.03,0.99,-0.11,0.77,-2640,-247,-2959,0.03,0.99,-0.11,0.82,-2676,77,4767,0.07,0.99,0.12,0.78,-2676,182,1628,-0.03,0.93,-0.37,0.82,-2712,171,1604,-0.03,0.93,-0.37,0.86,-2712,167,1524,0.12,0.98,-0.13,0.8,-2692,163,1510,0.12,0.98,-0.13,0.82,-2758,66,4548,-0.01,1,-0.07,0.76,-2757,61,4482,-0.01,1,-0.07,0.83,-2787,51,4405,-0.04,0.99,-0.15,0.77,-2760,66,4135,-0.05,0.99,0.16,0.75,-2780,164,1448,0.1,0.97,-0.24,1.04,-2773,126,1253,0.05,0.99,-0.14,0.86,-2780,-154,-2276,0.08,1,0.01,0.91,-2760,-180,-2578,0.05,0.98,-0.2,0.91,-2770,-198,-2668,0.05,0.98,-0.2,0.83,-2771,-208,-2719,0.02,0.98,-0.17,0.85,-2754,-229,-2835,0.02,0.98,-0.17,0.87,-2864,72,4624,0.02,1,-0.08,0.8,-2835,61,4493,-0.01,1,-0.07,0.8,-2868,55,4453,-0.03,0.99,-0.15,0.82,-2870,43,4369,-0.03,0.99,-0.15,0.76,-2857,106,3889,0.01,0.99,0.13,0.77,-2854,275,1913,-0.18,0.98,-0.1,0.8,-2833,171,1500,0.02,1,-0.01,1.02,-2833,137,1320,0.01,0.99,-0.14,0.91,-2840,128,1261,0.01,0.99,-0.14,0.89,-2833,-158,-2423,0.02,0.99,-0.12,0.78,-2836,-189,-2641,0.05,0.98,-0.2,0.88,-2872,-196,-2683,0.05,0.98,-0.2,0.76,-2950,78,4682,0.02,1,-0.08,0.79,-2931,60,4515,-0.05,0.99,-0.12,0.88,-2939,33,4317,-0.03,0.99,-0.15,0.78,-2922,43,4243,-0.05,0.99,0.13,1.08,-2919,57,4136,-0.04,0.99,0.14,0.97,-2933,212,1757,-0.05,0.96,-0.27,0.93,-2928,166,1474,-0.07,0.96,-0.26,1.02,-2949,128,1249,0.01,0.99,-0.14,0.97,-2918,97,1034,0.01,0.99,-0.14,0.83,-2948,-150,-2152,-0.02,0.99,0.12,0.82,-2956,-146,-2309,0.03,1,-0.04,0.77,-2940,-158,-2437,0.02,0.99,-0.12,0.77,-2993,65,4588,-0.05,0.99,-0.12,0.81,-3025,57,4528,-0.05,0.99,-0.12,0.96,-3038,46,4443,-0.05,0.99,-0.12,1.02,-3027,32,4283,-0.05,0.99,0.13,0.85,-3030,48,4170,-0.04,0.99,0.14,1.11,-2998,56,4125,-0.05,0.99,0.16,1.16,-3004,58,4107,-0.05,0.99,0.16,1.2,-3005,112,3872,-0.01,0.99,0.15,0.96,-2998,219,1794,-0.05,0.96,-0.27,0.84,-3036,194,1707,-0.01,0.96,-0.27,0.91,-3019,144,1401,-0.04,0.98,-0.2,0.99,-3016,116,1161,0.01,0.99,-0.14,0.91,-3038,-151,-2186,-0.05,0.99,0.09,0.86,-3018,-143,-2273,0.03,1,-0.04,0.8,-3015,-145,-2329,0.03,1,-0.04,0.83,-3039,-150,-2389,0.02,0.99,-0.12,0.79,-3084,68,4650,-0.05,0.99,-0.12,0.87,-3118,29,4317,0.06,1,-0.04,0.89,-3102,104,3937,0.04,0.99,0.11,0.77,-3093,114,3858,-0.01,0.99,0.15,0.84,-3101,124,3795,-0.01,0.99,0.15,0.79,-3115,225,1822,-0.01,0.96,-0.27,0.83,-3110,130,1266,-0.02,1,-0.01,0.97,-3113,122,1192,0.01,0.99,-0.14,0.85,-3117,103,1072,-0.02,0.98,-0.19,0.89,-3118,95,1030,-0.02,0.98,-0.19,0.85,-3079,82,962,-0.02,0.98,-0.19,0.87,-3072,69,890,-0.02,0.98,-0.19,0.86,-3074,54,823,-0.03,0.97,-0.23,0.8,-3100,36,728,0.02,0.99,-0.15,0.75,-3115,-181,-1953,0.06,0.96,0.27,0.78,-3070,-158,-2116,-0.06,1,0.07,0.76,-3101,-150,-2235,-0.05,0.99,0.09,0.87,-3092,-159,-2492,0.04,0.99,-0.1,0.77,-3105,-180,-2641,0.03,0.98,-0.2,0.75,-3156,60,4605,-0.02,0.99,-0.14,0.87,-3154,33,4367,0.06,1,-0.04,1.13,-3191,45,4230,0.07,0.99,0.16,1.28,-3194,66,4101,0.05,0.96,0.26,1.23,-3153,122,3801,-0.01,0.99,0.15,0.89,-3157,132,3737,-0.01,0.99,0.15,0.95,-3158,174,1588,0.04,0.99,-0.13,0.9,-3199,115,1143,-0.02,0.98,-0.19,0.77,-3161,93,1024,-0.02,0.98,-0.19,0.85,-3164,75,932,-0.02,0.98,-0.19,0.78,-3170,68,899,-0.02,0.98,-0.19,0.79,-3187,-166,-2097,-0.06,1,0.07,0.77,-3192,-152,-2268,-0.05,0.99,0.09,0.8,-3243,40,4395,0.06,1,-0.04,0.87,-3237,37,4325,0.06,1,-0.04,1.17,-3246,84,4048,0.05,0.96,0.26,1.1,-3254,137,3546,-0.04,1,-0.01,0.78,-3249,130,2896,-0.02,1,0.01,0.79,-3251,203,1749,-0.01,0.96,-0.27,0.8,-3243,156,1497,-0.01,0.98,-0.21,0.77,-3233,151,1473,-0.01,0.98,-0.21,0.91,-3266,126,1288,-0.07,1,-0.02,0.8,-3276,123,1216,-0.07,1,-0.02,0.97,-3267,117,1161,-0.01,0.98,-0.19,0.85,-3251,116,1158,-0.01,0.98,-0.19,0.87,-3262,94,1043,-0.02,0.98,-0.19,0.81,-3279,70,924,-0.02,0.98,-0.19,0.79,-3254,59,865,0.02,0.99,-0.15,0.81,-3249,-171,-2074,-0.06,1,0.07,0.77,-3327,69,4704,-0.04,0.99,-0.15,0.75,-3326,63,4662,-0.04,0.99,-0.15,0.76,-3327,69,4118,0.05,0.96,0.26,1.23,-3347,83,4071,0.05,0.96,0.26,0.89,-3359,111,3964,0.04,0.99,0.11,0.81,-3316,122,3850,0.04,0.99,0.11,0.89,-3330,128,3794,0.01,0.99,0.1,1.03,-3313,135,3519,-0.04,1,-0.01,0.8,-3339,130,2763,-0.02,1,0.01,0.77,-3341,108,1121,-0.01,0.98,-0.19,0.75,-3319,101,1083,-0.01,0.98,-0.19,0.78,-3328,89,1024,-0.01,0.98,-0.19,0.9,-3322,51,788,0.07,0.99,-0.15,0.75,-3310,-271,-1586,0.14,0.99,0.03,0.77,-3407,43,4246,0.08,0.98,0.2,1.17,-3422,76,4114,0.06,0.96,0.26,1.23,-3432,132,3682,-0.04,1,0,0.93,-3415,109,1130,-0.01,0.98,-0.19,0.8,-3413,72,890,0.07,0.99,-0.13,0.86,-3485,56,4564,-0.04,1,-0.06,0.82,-3472,49,4422,-0.01,1,-0.08,1.03,-3485,44,4274,0.08,0.98,0.2,0.99,-3515,69,4165,0.08,0.98,0.2,1.06,-3488,130,3694,-0.04,1,0,0.86,-3504,129,3649,-0.04,1,-0.01,0.77,-3488,130,1355,0.01,1,-0.06,0.76,-3473,123,1241,0.01,1,-0.06,0.8,-3516,121,1195,0.01,1,-0.06,0.79,-3486,111,1121,0.05,0.99,-0.12,0.95,-3499,112,1121,0.05,0.99,-0.12,0.81,-3502,95,1004,0.07,0.99,-0.15,0.81,-3474,84,940,0.07,0.99,-0.15,0.94,-3510,73,842,0.07,0.99,-0.14,0.88,-3502,60,760,0.07,0.99,-0.14,0.77,-3517,52,695,0.07,0.99,-0.15,0.76,-3587,47,4405,-0.01,1,-0.08,0.85,-3556,48,4286,0.08,0.98,0.2,1.05,-3570,63,4217,0.08,0.98,0.2,0.9,-3578,106,4040,0.06,0.96,0.26,0.91,-3573,116,3939,0.01,0.99,0.1,1.05,-3562,121,1193,0.01,1,-0.06,0.81,-3567,118,1137,0.05,0.99,-0.12,0.87,-3560,95,976,0.07,0.99,-0.15,1.02,-3661,53,4305,0.08,0.98,0.2,0.99,-3657,114,3970,0.01,1,0.07,0.95,-3638,135,1417,0.01,1,-0.06,0.76,-3655,120,1161,0.01,1,-0.06,1.03,-3734,43,4412,0.04,1,0.03,0.82,-3716,96,4120,0.08,0.98,0.2,0.81,-3712,113,3994,0.01,1,0.07,0.79,-3754,133,1372,0.01,1,-0.06,0.84,-3718,126,1248,0.01,1,-0.06,0.9,-3724,123,1195,0.01,1,-0.06,0.96,-3725,119,1129,0.01,1,-0.06,0.83,-3758,117,1084,0.01,1,-0.06,1.04,-3750,84,809,0.07,0.99,-0.13,0.84,-3730,60,606,0.08,1,-0.04,0.88,-3821,133,1382,-0.01,1,-0.05,0.81,-3797,122,1167,0.01,1,-0.06,0.93,-3812,111,971,0.05,0.99,-0.12,0.93,-3834,78,721,0.07,0.99,-0.14,0.95,-3823,70,654,0.08,1,-0.04,0.86,-3918,116,1069,-0.01,1,-0.05,1.04,-3889,73,606,0.08,1,-0.04,0.89,-3956,122,1190,-0.01,1,-0.05,0.9,-3954,73,451,0,1,0.04,0.92,-3953,77,236,0,1,0.01,0.75,-4078,128,1291,0.03,1,-0.03,0.75,-4047,125,1225,0.03,1,-0.03,0.8,-4077,124,1170,0.03,1,-0.03,0.84,-4032,105,821,0.04,0.99,-0.1,1.08,-4076,-146,-2580,0,1,0.1,0.75,-4122,109,834,0.03,1,-0.08,0.94,-4122,77,491,0.03,1,0,0.87,-4126,-147,-2573,0,1,0.1,0.77,-4223,-183,-2187,0.08,0.99,0.08,0.77,-4214,-182,-2215,0.08,0.99,0.08,0.76,-4278,122,939,0.03,1,-0.08,0.78,-4355,85,3290,-0.06,1,0,0.78,-4382,90,3228,-0.06,0.99,0.12,0.78,-4362,108,2681,-0.04,1,-0.01,0.8,-4353,164,2426,0.07,0.9,0.43,0.77,-4384,136,1257,0.03,1,-0.03,0.76,-4360,129,1059,0.03,1,-0.03,0.85,-4368,130,1001,0.03,1,-0.08,0.8,-4361,-150,-2437,0.09,0.99,0.09,0.77,-4476,84,3231,-0.06,0.99,0.12,0.79,-4435,91,3194,-0.06,0.99,0.12,0.79,-4455,102,3041,-0.03,1,0.07,0.75,-4469,175,2406,-0.21,0.92,0.32,0.79,-4457,141,1321,0.03,1,-0.03,0.76,-4454,124,895,0.03,1,-0.08,0.85,-4529,77,3249,-0.08,0.99,0.15,0.84,-4528,92,3130,-0.05,1,0.07,0.76,-4560,99,2988,-0.08,1,0.05,0.78,-4538,137,1128,0.03,1,-0.03,0.83,-4527,136,1113,0.03,1,-0.03,0.83,-4550,136,1058,0.05,1,0.08,0.75,-4551,-146,-2272,0.09,0.99,0.04,0.79,-4614,58,3345,-0.13,0.99,-0.06,0.76,-4601,136,1327,-0.04,0.99,0.14,0.76,-4709,145,1211,0.03,1,-0.03,0.84,-4699,127,847,0.03,1,-0.08,0.85,-4713,-125,-2079,0.13,0.99,-0.08,0.79,-4694,-129,-2100,0.13,0.99,-0.08,0.8,-4782,12,4969,-0.04,0.98,-0.22,0.77,-4751,132,887,0.03,1,-0.08,0.79,-4830,1,4890,-0.02,1,-0.06,0.76,-4840,142,1208,-0.09,0.97,0.22,0.8,-5334,34,4941,0.03,0.98,-0.19,0.76,-5650,132,1677,-0.03,1,0.03,0.8,-5640,173,1365,-0.05,0.96,0.27,0.78,-5643,54,-575,0,1,0,0.76,-5716,128,1756,-0.03,1,0.03,0.8,-5744,133,1552,-0.03,1,0.03,0.77,-5758,155,994,0.02,0.99,-0.15,0.83,-5713,148,939,-0.02,1,-0.06,0.82,-5731,143,855,-0.02,1,-0.06,0.81,-5812,124,1832,-0.03,1,0.03,0.8,-5794,129,1640,-0.03,1,0.03,0.85,-5795,130,1596,-0.03,1,0.03,0.84,-5796,131,1560,-0.03,1,0.03,0.85,-5820,132,1486,-0.03,1,0.03,0.8,-5810,179,1284,-0.05,0.97,0.23,0.78,-5824,143,899,-0.02,1,-0.06,0.78,-5827,141,862,-0.02,1,-0.06,0.79,-5915,-15,4511,0.06,0.99,-0.11,0.75,-5891,139,1436,-0.05,0.97,0.23,0.79,-5999,-18,4407,0.1,0.96,-0.24,0.85,-5972,-32,4365,0.1,0.96,-0.24,0.86,-5951,126,1591,-0.03,1,0.03,0.81,-5963,138,1422,-0.07,0.97,0.24,0.79,-5955,152,948,0.02,0.99,-0.15,0.78,-5970,41,-479,0.03,1,-0.03,0.78,-6071,21,4753,0.05,0.99,-0.12,0.82,-6030,-33,4337,0.1,0.96,-0.24,0.86,-6034,-94,3801,0.01,0.99,-0.11,0.92,-6111,18,4710,0.06,0.99,-0.11,0.88,-6115,-20,4402,-0.04,0.97,-0.24,0.81,-6110,-37,4262,0.09,0.99,-0.1,1.01,-6139,51,-328,0.03,1,-0.03,0.76,-6123,41,-594,0.03,1,-0.03,0.9,-6207,-10,4438,0.09,0.99,-0.1,1,-6232,-52,4129,-0.01,0.99,-0.16,0.99,-6213,-57,4092,-0.01,0.99,-0.16,1.07,-6220,-64,4048,-0.01,0.99,-0.14,0.93,-6203,-65,4038,-0.01,0.99,-0.14,1.01,-6215,-88,3845,0.01,0.99,-0.11,0.97,-6228,-91,3818,0.01,0.99,-0.11,0.99,-6233,-119,3427,-0.12,0.96,0.26,0.76,-6215,-11,3181,-0.12,0.91,0.4,0.77,-6202,47,-501,0.03,1,-0.03,0.76,-6217,37,-814,0.03,1,-0.03,0.78,-6283,63,4979,0.03,0.98,-0.18,0.84,-6316,21,4627,0.06,0.99,-0.11,1.02,-6272,15,4572,-0.04,0.97,-0.24,0.96,-6274,-41,4202,-0.01,0.99,-0.16,0.98,-6286,-110,3574,0.01,1,-0.06,0.75,-6304,-113,3522,0.01,1,-0.06,0.94,-6306,14,3074,-0.05,0.97,0.22,0.76,-6283,35,-905,0.03,1,-0.03,0.77,-6386,21,4607,-0.01,0.99,-0.16,0.98,-6384,6,4510,-0.01,0.99,-0.16,1.13,-6376,-17,4367,-0.01,0.99,-0.16,0.78,-6390,-43,4202,-0.01,0.99,-0.16,1.06,-6363,-66,4042,0.01,0.99,-0.11,1.11,-6358,-59,3246,-0.12,0.91,0.4,0.91,-6400,48,-435,-0.01,1,-0.02,0.75,-6451,29,4647,0.01,0.98,-0.17,1.09,-6453,-50,4160,0.01,0.99,-0.16,1.13,-6444,-68,4022,-0.01,0.99,-0.12,0.79,-6446,-76,3954,-0.01,0.99,-0.12,0.88,-6454,-105,3727,-0.01,1,0.01,1.06,-6472,-105,3691,-0.01,1,0.01,0.82,-6449,-105,3644,-0.01,1,0.01,0.79,-6460,-88,3297,0.14,0.99,0.08,0.78,-6431,27,2991,-0.05,0.97,0.22,0.81,-6476,34,2952,-0.05,0.97,0.22,0.77,-6451,112,684,-0.04,1,-0.08,0.77,-6436,-12,-1873,0.01,0.99,-0.13,0.76,-6551,68,4942,0.05,0.99,-0.13,0.77,-6550,44,4726,0.01,0.98,-0.17,0.92,-6537,-17,4359,0.01,0.99,-0.16,0.82,-6555,-81,3924,-0.01,0.99,-0.12,0.92,-6529,-89,3854,-0.01,0.99,-0.12,0.91,-6514,-105,3687,-0.01,1,0.01,0.8,-6527,-105,3605,-0.01,1,0.01,0.85,-6518,-81,3318,0.14,0.99,0.08,0.98,-6515,-79,3279,0.14,0.99,0.08,0.94,-6538,35,2933,-0.05,0.97,0.22,0.81,-6528,81,2374,0,0.99,0.11,0.83,-6537,91,2240,-0.03,1,0.03,0.87,-6514,96,2140,0,1,0.05,0.86,-6539,97,2123,0,1,0.05,0.85,-6520,106,1921,-0.04,1,0.04,0.79,-6536,110,702,-0.04,1,-0.08,0.77,-6525,81,326,-0.04,1,-0.08,0.77,-6538,17,-1631,0.04,1,-0.06,0.79,-6553,5,-1748,0.01,0.99,-0.13,0.8,-6519,4,-1753,0.01,0.99,-0.13,0.84,-6631,67,4902,0.05,0.99,-0.13,0.93,-6626,14,4547,0.01,0.99,-0.16,1.09,-6615,0,4464,0.01,0.99,-0.16,1.09,-6630,-43,4191,0.05,1,-0.08,0.77,-6623,-47,4150,0.05,1,-0.08,1.08,-6639,-74,3964,0.05,0.99,-0.16,1.07,-6631,-77,3945,0.05,0.99,-0.16,0.81,-6603,-99,3795,0.16,0.99,-0.06,1.05,-6599,-102,3685,0.1,0.99,0.03,0.81,-6606,-81,3455,0.14,0.98,0.11,0.79,-6630,21,-1622,0.04,1,-0.06,0.8,-6632,-29,-2022,0.01,0.99,-0.13,0.81,-6616,-34,-2058,0.01,0.99,-0.13,0.79,-6709,78,4961,0.05,1,-0.08,0.77,-6688,28,4622,0.01,0.98,-0.17,1.02,-6687,0,4458,0.01,0.99,-0.16,0.88,-6709,-75,3896,0.16,0.99,-0.06,0.98,-6684,-82,3850,0.16,0.99,-0.06,0.97,-6716,-90,3646,0.1,0.99,0.03,0.88,-6712,-42,3161,0.14,0.99,0.08,0.87,-6681,39,2822,-0.02,1,-0.03,0.76,-6707,63,2540,0,0.99,0.11,0.78,-6706,80,2373,-0.03,1,0.08,0.83,-6681,87,2296,-0.03,1,0.08,0.79,-6689,88,2206,-0.04,1,0.04,0.91,-6685,98,1953,-0.04,1,0.04,0.82,-6708,81,430,-0.04,1,-0.08,0.76,-6710,26,-1407,-0.01,1,-0.02,0.8,-6675,-36,-2084,0.01,0.99,-0.13,0.81,-6750,82,4988,0.05,1,-0.08,0.82,-6775,79,4936,0.05,1,-0.08,0.88,-6780,76,4909,0.05,0.99,-0.13,0.92,-6762,62,4811,0.01,0.98,-0.17,0.76,-6759,51,4745,0.01,0.98,-0.17,0.93,-6776,25,4600,0.01,0.98,-0.17,0.94,-6763,-29,4276,0.01,0.99,-0.16,0.77,-6790,-32,4230,0.05,1,-0.08,0.76,-6797,-40,4124,0.05,0.99,-0.16,0.88,-6771,-61,4008,0.05,0.99,-0.16,0.96,-6756,-69,3882,0.16,0.99,-0.06,0.75,-6782,-47,3349,0.14,0.99,0.08,0.75,-6762,1,2989,-0.12,0.91,0.4,0.84,-6795,76,2379,-0.03,1,0.08,0.83,-6757,-6,-1854,0.01,0.99,-0.13,0.85,-6787,-9,-1878,0.01,0.99,-0.13,0.82,-6774,-46,-2168,0.01,0.99,-0.13,0.75,-6876,84,4940,0.05,1,-0.08,0.77,-6847,49,4730,0.01,0.98,-0.17,0.75,-6847,-10,4390,0.01,0.99,-0.16,0.86,-6852,-18,4341,0.01,0.99,-0.16,0.81,-6845,-21,4322,0.01,0.99,-0.16,0.77,-6866,-70,3708,0.14,0.98,-0.11,0.84,-6859,-50,3497,0.12,0.98,0.15,0.92,-6865,76,2366,-0.03,1,0.08,0.79,-6850,-38,-2111,0.01,0.99,-0.13,0.84,-6875,-49,-2197,0.01,0.99,-0.13,0.8,-6867,-67,-2341,0.01,0.99,-0.13,0.76,-6920,46,4703,0.01,0.98,-0.17,0.79,-6932,33,4632,0.01,0.98,-0.17,0.79,-6927,-38,3932,0.16,0.99,-0.02,0.84,-6954,-47,3779,0.29,0.96,-0.01,0.79,-6914,-59,3705,0.29,0.96,-0.01,0.77,-6954,-72,-2384,0.01,0.99,-0.13,0.79,-7021,-8,4376,0.07,0.99,-0.07,0.76,-7018,-22,4147,0.11,0.99,0,0.82,-7016,-23,3962,0.16,0.99,-0.02,0.76,-7017,-25,3921,0.14,0.98,-0.11,0.84,-7001,-28,3916,0.14,0.98,-0.11,0.77,-7014,-28,3810,0.29,0.96,-0.01,0.79,-7005,-31,3728,0.29,0.96,-0.01,0.8,-7032,-14,3379,0.14,0.99,0.08,0.81,-7012,-3,3200,0.14,0.99,0.08,0.82,-7038,10,3082,0.14,0.99,0.08,0.79,-7026,15,2999,0.14,0.99,0.08,0.79,-7012,100,1565,-0.04,1,0.04,0.83,-7005,111,1256,-0.04,1,0,0.77,-7083,-15,4145,0.11,0.99,0,0.79,-7119,19,3059,0.07,0.99,0.07,0.78,-7094,96,1570,-0.04,1,0.04,0.84,-7104,99,1486,-0.04,1,0.04,0.88,-7073,108,1257,-0.04,1,0,0.79,-7109,-86,-2509,0.03,0.99,-0.13,0.78,-7166,37,4619,0.03,0.98,-0.18,0.8,-7158,-7,4201,0.11,0.99,0,0.85,-7167,88,1697,-0.01,1,0.01,0.82,-7195,100,1358,-0.04,1,0.04,0.85,-7160,-75,-2436,0.03,0.99,-0.13,0.75,-7237,27,4553,0.03,0.98,-0.18,0.83,-7252,4,4201,0.13,0.99,0.01,0.75,-7278,5,4109,0.06,1,-0.07,0.75,-7249,25,3105,0.07,0.99,0.07,0.75,-7240,94,1472,-0.04,1,0.04,0.89,-7263,94,1441,-0.04,1,0.04,0.81,-7267,96,1163,-0.06,1,-0.07,0.76,-7326,27,4538,0.03,0.98,-0.18,0.81,-7322,11,4322,0.12,0.99,0,0.8,-7324,13,4232,0.13,0.99,0.01,0.76,-7337,91,1444,-0.04,1,0.04,0.81,-7427,26,4520,0.06,1,-0.06,0.81,-7400,86,1685,-0.01,1,0.01,0.75,-7420,88,1479,-0.01,1,0.01,0.86,-7434,93,1280,-0.04,1,0,0.8,-7433,92,1248,-0.06,1,-0.07,0.75,-7518,35,4540,0.09,0.99,-0.07,0.76,-7508,34,4374,0.12,0.99,0,0.79,-7492,32,4367,0.12,0.99,0,0.76,-7482,81,2086,-0.03,1,0.08,0.75,-7484,86,1614,-0.01,1,0.01,0.76,-7483,87,1527,-0.01,1,0.01,0.83,-7555,86,4843,0.02,0.98,-0.17,0.85,-7573,39,4450,0.09,1,0.01,0.75,-7573,86,1523,-0.01,1,0.01,0.77,-7631,71,4745,0.02,0.98,-0.17,0.82,-7737,-71,-2390,-0.03,1,-0.08,0.86,-7832,-78,-2435,-0.03,1,-0.08,0.87,-7916,81,1716,-0.01,1,0.01,0.84,-7892,46,-32,-0.01,1,-0.04,0.78,-7886,44,-84,-0.01,1,-0.04,0.79,-7893,-77,-2396,-0.03,1,-0.08,0.86,-7885,-119,-2912,0.03,0.99,-0.13,0.77,-7995,77,1347,-0.01,1,-0.01,0.77,-7998,-101,-2662,-0.03,1,-0.08,0.87,-7976,-117,-2875,-0.03,1,-0.08,0.85,-7972,-121,-2935,-0.03,1,-0.08,0.78,-8049,42,-103,-0.01,1,-0.02,0.79,-8051,-81,-2388,-0.03,1,-0.08,0.8,-8040,-103,-2679,-0.03,1,-0.08,0.8,-8057,-110,-2752,-0.03,1,-0.08,0.88,-8148,75,1541,-0.01,1,-0.01,0.81,-8122,-98,-2575,-0.03,1,-0.08,0.79,-8116,-111,-2740,-0.03,1,-0.08,0.85,-8194,75,1543,-0.01,1,-0.01,0.77,-8305,74,1694,-0.01,1,-0.01,0.82,-8302,-132,-2941,-0.03,1,-0.08,0.84,-8351,70,996,-0.01,1,-0.01,0.79,-8363,67,650,-0.01,1,-0.04,0.77,-8431,74,2748,0.03,1,-0.03,0.76,-8479,71,1507,-0.01,1,-0.01,0.81,-8460,70,1449,-0.01,1,-0.01,0.86,-8472,70,1386,-0.01,1,-0.01,0.82,-8453,70,1333,-0.01,1,-0.01,0.78,-8463,68,963,-0.01,1,-0.01,0.76,-8514,72,2609,0.03,1,-0.03,0.85,-8538,70,1599,-0.01,1,-0.01,0.87,-8540,67,1086,-0.01,1,-0.01,0.89,-8623,79,2726,0.03,1,-0.03,0.86,-8605,74,2579,0.03,1,-0.03,0.78,-8637,70,2441,0.03,1,-0.03,0.82,-8617,64,684,-0.01,1,-0.01,0.78,-8683,65,1126,-0.01,1,-0.01,0.86,-8687,65,1088,-0.01,1,-0.01,0.82,-8712,63,770,-0.01,1,-0.01,0.83,-8780,82,2654,0.03,1,-0.03,0.9,-8772,71,2336,0.03,1,-0.03,0.76,-8784,65,1217,-0.01,1,-0.01,0.81,-8928,79,2433,0.03,1,-0.03,0.8,-8946,61,1082,-0.01,1,-0.01,0.83,-9015,61,1208,-0.01,1,-0.01,0.79,-9010,61,1148,-0.01,1,-0.01,0.86,-8999,59,818,-0.01,1,-0.01,0.77,-9010,59,800,-0.01,1,-0.01,0.77,-9098,59,1049,-0.01,1,-0.01,0.87,-9117,59,1035,-0.01,1,-0.01,0.88,-9090,26,-526,-0.01,1,-0.02,0.8,-9103,24,-633,-0.03,1,-0.08,0.88,-9080,17,-733,-0.03,1,-0.08,0.81,-9109,-2,-958,-0.03,1,-0.08,0.81,-9178,117,3153,0.02,1,-0.07,0.75,-9158,58,1049,-0.01,1,-0.01,0.85,-9182,26,-485,-0.01,1,-0.02,0.81,-9180,26,-522,-0.01,1,-0.02,0.9,-9173,19,-672,-0.03,1,-0.08,0.92,-9156,-25,-1229,-0.03,1,-0.08,0.82,-9177,-42,-1436,-0.03,1,-0.08,0.75,-9265,108,2936,0.03,1,-0.03,0.76,-9275,57,1056,-0.01,1,-0.01,0.79,-9234,57,1003,-0.01,1,-0.01,0.75,-9269,56,855,-0.01,1,-0.01,0.83,-9248,55,770,-0.01,1,-0.01,0.8,-9242,31,-244,-0.01,1,-0.02,0.75,-9318,55,901,-0.01,1,-0.01,0.76,-9349,27,-364,-0.01,1,-0.02,0.79,-9335,-5,-912,-0.03,1,-0.08,0.96,-9333,-40,-1357,-0.03,1,-0.08,0.8,-9410,52,631,-0.01,1,-0.01,0.78,-9425,-12,-956,-0.03,1,-0.08,0.93,-9509,52,905,-0.01,1,-0.01,0.77,-9518,51,687,-0.01,1,-0.01,0.81,-9581,50,676,-0.01,1,-0.01,0.83,-9600,49,536,-0.01,1,-0.01,0.8,-9585,19,-499,-0.03,1,-0.08,0.77,-9575,7,-663,-0.03,1,-0.08,0.75,-9664,14,-539,-0.03,1,-0.08,0.76,-9635,13,-560,-0.03,1,-0.08,0.77,-9650,-2,-745,-0.03,1,-0.08,0.81,-9728,58,1769,-0.02,1,-0.01,0.76,-9715,57,1573,-0.02,1,-0.01,0.75,-9711,0,-692,-0.03,1,-0.08,0.83,-9834,106,2731,-0.01,1,-0.05,0.82,-9831,46,522,-0.01,1,-0.01,0.85,-9808,8,-559,-0.03,1,-0.08,0.83,-9877,88,2411,-0.01,1,-0.05,0.85,-9889,45,559,-0.01,1,-0.01,0.89,-9876,44,403,-0.01,1,-0.04,0.84,-9902,25,-297,-0.01,1,-0.02,0.78,-9964,113,2891,-0.01,1,-0.05,0.76,-9979,98,2619,-0.01,1,-0.05,0.75,-9954,96,2570,-0.01,1,-0.05,0.83,-9959,80,2273,-0.01,1,-0.05,0.76,-9971,6,-519,-0.03,1,-0.08,0.83,-9963,5,-529,-0.03,1,-0.08,0.81".split(",");
  var newPosition = new THREE.Vector3( 0,0,0 );
  var newNormal = new THREE.Vector3( 0,0,0 );

  if( usePredefined ) {
    //console.time("generate trees");
    var len = forrestData.length;
    var trees = Math.floor(len/7);
    var i = 0;
    for (var i = 0; i < len; i+=7 ) {
      newPosition.set(Number(forrestData[i]),Number(forrestData[i+1]),Number(forrestData[i+2]));
      newNormal.set(Number(forrestData[i+3]),Number(forrestData[i+4]),Number(forrestData[i+5]));

      plotTree(newPosition,newNormal,Number(forrestData[i+6]),terrain,trunkMesh,shapeMesh, shadowMesh, mergeGeometry, mergeShadowGeometry)
    }
    //console.timeEnd("generate trees");
  }
  else {
    //console.time("generate trees");
   /* var gridX = 250;
    var gridY = 200;
    var pointAtVector = new THREE.Vector3(0, -1, 0);
    var marginVector = new THREE.Vector3(0,10,0);
    var rabbitSpawnPosition = new THREE.Vector3(4700,500,0);

    var allTreePositions = "";

    for (var px = gridX - 1; px >= 0; px--) {
      for (var py = gridY - 1; py >= 0; py--) {
        var uvX = px/gridX - .5;
        var uvY = py/gridY - .5;

        //TODO Prevent trees to grow at the paddle-setup-screen

        if( (uvX > -0.05 && uvX < 0.05 && uvY > -0.4 && uvY < 0.15)  ) continue;

        var n = ImprovedNoise.noise((uvX+0.5)*15, (uvY+0.5)*5,Math.random()*4);

        if( n >= 0.50) {

          var scale = (n*n)+0.5;
          var newPosition = new THREE.Vector3(uvX*20000+Math.random()*50,500,uvY*8000+1000+Math.random()*50);

          if( newPosition.distanceTo(rabbitSpawnPosition) < 300 ) {
            continue;
          }

          //shoot ray to find y
          var ray = new THREE.Raycaster( newPosition, pointAtVector);
          var intersects = ray.intersectObject(terrain.terrainShortcut);
          if( intersects.length == 0 ) {
            console.log("cancel tree")
            continue;
          }

          newPosition.y = intersects[0].point.clone().add( marginVector).y;

          var intersectionNormal = intersects[0].face.normal;

          allTreePositions += Math.round(newPosition.x) +","+
            Math.round(newPosition.y) +","+
            Math.round(newPosition.z) +"," +
            Math.round(intersectionNormal.x*100)/100 +"," +
            Math.round(intersectionNormal.y*100)/100 +"," +
            Math.round(intersectionNormal.z*100)/100 + "," +
            Math.round(scale*100)/100 + ","

          plotTree(newPosition,intersectionNormal,scale,terrain,trunkMesh,shapeMesh, shadowMesh, mergeGeometry, mergeShadowGeometry);

        }
      };

    };
    */
    console.log( allTreePositions )
  //  console.timeEnd("generate trees");
  }

  var forrestMesh = new THREE.Mesh(mergeGeometry,Materials.treeBranches);
  forrestMesh.name = 'forrestMesh'
  terrain.terrainShortcut.add(forrestMesh);

  var shadowsMesh = new THREE.Mesh(mergeShadowGeometry,Materials.terrainShadow);
  shadowsMesh.name = 'shadowsMesh'
  terrain.terrainShortcut.add(shadowsMesh);

}

function plotTree( treePosition , treeNormal, scale, terrain, trunkMesh, shapeMesh, shadowMesh, mergeTreeGeom, mergeShadowGeom){

  trunkMesh.scale.set(scale,scale,scale)
  trunkMesh.position = treePosition

  shapeMesh.rotation.y = Math.random();
  shapeMesh.position = treePosition

  shapeMesh.scale.set(scale,scale,scale)

  shadowMesh.position = treePosition
  shadowMesh.scale.set(scale,scale,scale)

  shadowMesh.rotation.set(treeNormal.x,treeNormal.y, treeNormal.z).normalize().negate();

  THREE.GeometryUtils.merge(mergeTreeGeom,shapeMesh);
  THREE.GeometryUtils.merge(mergeTreeGeom,trunkMesh);
  THREE.GeometryUtils.merge(mergeShadowGeom,shadowMesh);

}

function createClouds(terrain) {

  var cloudMesh;

  cloudMesh = new THREE.Mesh( Geometry.cloud1 ,Materials.clouds);
  cloudMesh.position.set(-3400,1600,-6000);
  //cloudMesh.rotation.y = -Math.PI*.1;
  cloudMesh.scale.set(20,20,17+Math.random()*2);
  terrain.add(cloudMesh);

  cloudMesh = new THREE.Mesh( Geometry.cloud1 ,Materials.clouds);
  cloudMesh.position.set(-2000,1600,-10000);
  cloudMesh.scale.set(20,20,20);
  terrain.add(cloudMesh);


  cloudMesh = new THREE.Mesh( Geometry.cloud2 ,Materials.clouds);
  cloudMesh.position.set(3000,1600,-10000);
  cloudMesh.scale.set(30,30,30);
  terrain.add(cloudMesh);

  cloudMesh = new THREE.Mesh( Geometry.cloud3 ,Materials.clouds);
  cloudMesh.position.set(4000,1600,-6000);
  //cloudMesh.rotation.y = Math.PI*0.5;
  cloudMesh.scale.set(20,20,17+Math.random()*2);
  terrain.add(cloudMesh);


  cloudMesh = new THREE.Mesh( Geometry.cloud2 ,Materials.clouds);
  cloudMesh.position.set(-5000,1600,-1000);
  cloudMesh.scale.set(20,20,20+Math.random()*2);
  terrain.add(cloudMesh);

  cloudMesh = new THREE.Mesh( Geometry.cloud3 ,Materials.clouds);
  cloudMesh.position.set(-5000,1600,4000);
  cloudMesh.scale.set(20,20,20);
  cloudMesh.rotation.y = Math.PI;
  terrain.add(cloudMesh);

}


function createIcons(renderer){
  var icons = {};

  // get the extras form the geometry
  var iconTypes = Object.keys(Geometry);

  for (var i = iconTypes.length - 1; i >= 0; i--) {

    if( iconTypes[i].indexOf("extra_") == -1 ) continue;

    var iconType = iconTypes[i];

    var iconMat = Materials.icon;
    var iconReflectionMat = Materials.iconReflection;
    //iconMat.uniforms.diffuse.value.setHex( tempColors[iconType] );

    // get geometry

    var iconGeo = Geometry[iconType];

    if( !iconGeo )
      throw new Error('geometry not found for '+iconType)

    THREE.GeometryUtils.center(iconGeo);
    iconGeo.applyMatrix( new THREE.Matrix4().makeScale(30,30,30) );
    iconGeo.applyMatrix( new THREE.Matrix4().makeRotationX( 90*Math.PI/180 ) );
    iconGeo.applyMatrix( new THREE.Matrix4().makeTranslation(0,iconGeo.boundingBox.min.z*-29,0))

    var iconMesh = new THREE.Mesh( iconGeo, iconMat) ;
    iconMesh.position.y = 40;

    var iconMirrorMesh = new THREE.Mesh( iconGeo, iconReflectionMat) ;
    iconMirrorMesh.position.y = -40;
    iconMirrorMesh.scale.set(1,-1,1);
    iconMesh.add(iconMirrorMesh);


    //store to library
    icons[iconType] = iconMesh;
  };

  return icons;
}


function createForce(arena, world, force){
  debug('create force',force)

  var w = settings.data.arenaWidth
    , h = settings.data.arenaHeight
    , hw = w*.5
    , hh = h*.5

  // TODO *50 is not correct. what would be the proper scale in comparison to the puck?
  var forceGeo = new THREE.PlaneGeometry( settings.data.unitSize*7,settings.data.unitSize*7,1,1 )
    , forceMesh = new THREE.Mesh( forceGeo, force.type == 'attract' ? Materials.forceAttract : Materials.forceRepell );
  forceMesh.position.x = force.position[0]-hw;
  forceMesh.position.z = force.position[1]-hh;
  forceMesh.position.y = 5;
  forceMesh.rotation.x = Math.PI*-.5;

  arena.add(forceMesh);

  return forceMesh;
}

function removeForce(force){
  debug('remove force')

  TweenMax.killTweensOf(force);

  if( force.parent )
    force.parent.remove(force);
}


function createPuckPool() {
  var PuckPool = new ObjectPool();
  var cubeSize = settings.data.unitSize;
  var puckGeo = new THREE.CubeGeometry(100,cubeSize*2,100 )

  PuckPool.createObject = function(){

    var puckMesh = new THREE.Mesh( puckGeo, Materials.puck.clone() );
    puckMesh.scale.x = cubeSize/100
    puckMesh.scale.z = cubeSize/100
    return puckMesh;
  }.bind(this)

  return PuckPool;
}

function createPuck(arena, body){
  debug('create puck');

  var w = settings.data.arenaWidth
  , h = settings.data.arenaHeight
  , hw = w*.5
  , hh = h*.5

  body.data.blinkAmount = 0;

  var puckMesh = puckPool.getObject();

  puckMesh.position.set(body.current[0]-hw,0,body.current[1]-hh);
  puckMesh.scale.y = 0.01;
  arena.add(puckMesh);

  TweenMax.to( puckMesh.scale, 0.5, {y:1,delay:0,ease:Sine.easeOut});

  return puckMesh;
}

// draw obstacles with THREE.Shape()
// http://mrdoob.github.com/three.js/examples/webgl_geometry_shapes.html
function createExtra(arena, world, icons, extra){
  debug('create extra')

  var w = settings.data.arenaWidth
    , h = settings.data.arenaHeight
    , hw = w*.5
    , hh = h*.5
    , id = extra.data.id
    , icon = id && ("extra_" + id.replace(/ /g,''));

  // extra has an icon
  if( icon && icons[icon] ){
    var icon = icons[icon];
    icon.position.x = extra.current[0]-hw;
    icon.position.z = extra.current[1]-hh;
    icon.position.y = 200;
    icon.children[0].position.y = -400;
    TweenMax.from(icon.rotation,0.5,{y:Math.PI*4,ease:Sine.easeOut})
    TweenMax.to(icon.position,0.5,{y:40,ease:Sine.easeOut})
    TweenMax.to(icon.children[0].position,0.5,{y:-40,ease:Sine.easeOut})
    arena.add(icon);
    return icon;

  // extra is a polygon
  } else if( extra.shape ){

    var shape = new THREE.Shape();
    var x = extra.current[0]
      , y = extra.current[1]
      , v = extra.shape.vertices[0];

    // normalize the coordinates around [0,0]
    shape.moveTo(v[0]-x,v[1]-y);
    for( var i=1; i < extra.shape.vertices.length; i++ ){
      v = extra.shape.vertices[i];
      shape.lineTo(v[0]-x,v[1]-y);
    }

    // TODO these should already have been created
    var shapeGeo = new THREE.ExtrudeGeometry(shape,{
          amount: settings.data.unitSize*4,
          bevelEnabled: false,
          extrudeMaterial: 0,
          material: 1
        })
    
    shapeGeo.applyMatrix( new THREE.Matrix4().translate( new THREE.Vector3(0, 0, settings.data.unitSize*-2)));
    
    var shapeMesh = new THREE.Mesh( shapeGeo , new THREE.MeshFaceMaterial([Materials.obstacleSide, Materials.obstacle2]) );

    shapeMesh.rotation.x = Math.PI/2 // 90°
    
    shapeMesh.position.x = x-hw;
    shapeMesh.position.z = y-hh;
    shapeMesh.scale.z = 0.01;

    TweenMax.to(shapeMesh.scale,0.4,{z:1,ease:Back.easeOut})

    arena.add(shapeMesh);
    return shapeMesh;

  } else {
    throw new Error('unsupported extra')
  }
}

function createShield(arena, body){
  debug('create shield')

  var mesh = shieldPool.getObject();

  mesh.position.x = body.current[0] - settings.data.arenaWidth/2;
  mesh.position.z = body.current[1] - settings.data.arenaHeight/2;
  mesh.scale.x = (body.aabb[1] - body.aabb[3])/100
  mesh.scale.z = (body.aabb[2] - body.aabb[0])/100
  mesh.scale.y = 0.01;


  mesh.material.opacity = 1;

  TweenMax.to( mesh.scale, 0.5, {y:1,delay:0,ease:Sine.easeOut,onStart:function(){
    dmaf.tell( "shields_reset_up");
    dmaf.tell( "shield_reset_up");

    arena.add(mesh);
  }});
  TweenMax.to( mesh.material, 0.5, {opacity:0.2,delay:0,ease:Sine.easeOut});


  return mesh;
}

function createBullet(arena, world, body){
  debug('create bullet')
  var mesh = bulletPool.getObject();
  mesh.position.x = body.current[0]-settings.data.arenaWidth*.5;
  mesh.position.z = body.current[1]-settings.data.arenaHeight*.5;
  mesh.position.y = 4;
  arena.add(mesh);
  return mesh;
}

function removeBullet(bullet){
  debug('remove bullet')
  if( bullet && bullet.parent ){
    bullet.parent.remove(bullet);
    bulletPool.returnObject(bullet.poolId);
  }
}

function createBulletPool() {
  var BulletPool = new ObjectPool();
  var bulletGeo = new THREE.PlaneGeometry( settings.data.arenaWidth/settings.data.arenaColumns,150 );
  BulletPool.createObject = function(){
    var bulletMat = new THREE.MeshLambertMaterial( { transparent:true, depthWrite:false,color: 0xffff00})
      , bulletMesh = new THREE.Mesh( bulletGeo, bulletMat );
    bulletMesh.rotation.x = Math.PI*-.5
    return bulletMesh;
  }.bind(this)
  return BulletPool;
}

function createShieldPool() {
  var ShieldPool = new ObjectPool();

  var geom = new THREE.BoxGeometry(100,settings.data.arenaSideHeight,100,1,1,1,{ px: true, nx: true, py: true, ny: false, pz: true, nz: false })
  geom.applyMatrix( new THREE.Matrix4().translate( new THREE.Vector3(0, settings.data.arenaSideHeight*.5, 0)));


  ShieldPool.createObject = function(){

    var mesh = new THREE.Mesh( geom, Materials.shield.clone() );
    mesh.material.opacity = 1;
    mesh.name = 'shield';
    return mesh;
  }.bind(this)

  return ShieldPool;
}

//Remove stuff

function removeExtra(extra, animate){
  debug('remove extra')
  if( animate ) {
    TweenMax.to(extra.rotation,0.5,{y:Math.PI*4,ease:Sine.easeIn})
    TweenMax.to(extra.position,0.5,{y:200,ease:Sine.easeIn})
    TweenMax.to(extra.children[0].position,0.5,{y:-400,ease:Sine.easeIn,onComplete:function(){
      extra.rotation.y = 0;
      if( extra && extra.parent )
        extra.parent.remove(extra);
    }})
  }
  else {
    if( extra && extra.parent )
        extra.parent.remove(extra);
  }

  
}

function removeObstacle(obstacle){
  debug('remove obstacle');

  TweenMax.to(obstacle.scale,0.4,{z:0.01,ease:Sine.easeIn,onComplete:function(){
    if( obstacle && obstacle.parent )
        obstacle.parent.remove(obstacle);
  }})
}

function removePuck(puck){
  debug('remove puck');

  var puckRef = puck;

  TweenMax.to(puck.scale,0.4,{y:0.01, ease:Back.easeIn,onComplete:function(){
    if( puckRef && puckRef.parent ) {
      puckRef.parent.remove(puckRef);
      puckPool.returnObject(puckRef.poolId);
    }
  }})
}

function removeShield(shield, fast ){
  debug('remove shield')
  if( shield && shield.parent ) {

    var animDelay = 0.3

    if( !fast) {
      shield.material.opacity = 1;
      dmaf.tell( "shield_reset_down");
      dmaf.tell( "shields_reset_down");
      TweenMax.to( shield.material, 0.5, {opacity:0,ease:Sine.easeOut});
      animDelay = 0;
    }

    var shieldRef = shield;
    TweenMax.to(shieldRef.scale,0.4,{
      delay: animDelay,
      y: 0.01,
      ease: Sine.easeIn,
      onStart: function(){
        dmaf.tell( "shield_reset_down");
        dmaf.tell( "shields_reset_down");
      },
      onComplete:function(){
        if( shieldRef && shieldRef.parent ){
          shieldRef.parent.remove(shieldRef);
          shieldPool.returnObject(shieldRef.poolId);
        }
      }
    })
  }
}
