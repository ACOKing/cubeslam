module.exports = '#ifdef GL_ES\nprecision mediump float;\n#endif\n\nvarying vec2 vUv;\nuniform sampler2D tCamera;\nuniform float time;\nuniform float active;\n\nfloat rect( vec2 p, vec2 b )\n{\n    vec2 v = abs(p) - b;\n    float d = smoothstep(0.9,1.0,pow(length(max(v,0.0)),0.007));\n    return (1.0-d);\n}\n\nfloat f(float x, float y) {\n\n    float ny = y - sin(mod(time,7.0));\n    \n    return 2.0/sqrt(abs(ny));\n}\n\nfloat frac(float x) { return mod(x,1.0); }\nfloat noise(vec2 x,float t) { return frac(sin(dot(x,vec2(1.38984*sin(t),1.13233*cos(t))))*653758.5453); }\n\nvoid main(void) \n{\n\n    if( active == 0.0 ) {\n        float c=noise(vUv,time);\n        c*=0.2+0.05*clamp(sin(vUv.y*3.141592+time*3.0)-0.4,0.0,1.0);\n        gl_FragColor=vec4(vec3(c),1.0);\n    }\n    else {\n        vec2 pos = vUv;\n        pos.x = (1.0-pos.x);\n        pos.y -= 0.05;\n        vec3 color = texture2D(tCamera,pos).rgb; \n\n        float rect1 = rect(pos-vec2(0.5,0.2), vec2(0.2,0.10));\n        float rect2 = rect(pos-vec2(0.5,0.2), vec2(0.194,0.093));\n        \n        float rectSum = rect1 - rect2;\n\n        //cross\n        rectSum += rect(pos-vec2(0.5,0.2), vec2(0.05,0.001));\n        rectSum += rect(pos-vec2(0.5,0.2), vec2(0.001,0.05));\n\n        //add rectangle in webcam\n        color = color + vec3(rectSum)*0.4;\n\n        //ambient scanlines\n        float lines = mix(1.0, abs(sin(gl_FragCoord.y/1.1))/2.0, 0.3);\n        vec3 saturatedColor = vec3((color.r+color.b+color.g)/3.0);\n\n        float a = f(pos.x,1.0-pos.y);\n        vec3 scanLines = vec3(sqrt(a)/10.0,  sqrt(a)/8.0,  sqrt(a)/5.0);\n\n        vec3 scanMix = mix(color+scanLines*scanLines,saturatedColor*lines,1.0-rect2);\n        //vec3 scanMix = mix(color+scanLines*scanLines,saturatedColor,1.0-rect2);\n\n        gl_FragColor = vec4(scanMix,1.0);\n    }\n\n    \n}\n\n';